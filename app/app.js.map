{"version":3,"sources":["webpack:///webpack/bootstrap aa7d8a52b2990c8c478b","webpack:///./app/index.js","webpack:///./~/svg.js/dist/svg.js","webpack:///./~/svg.draggable.js/dist/svg.draggable.js","webpack:///./~/svg.select.js/dist/svg.select.js","webpack:///./~/svg.resize.js/dist/svg.resize.js"],"names":["SVG","require","groupSelect","draw","size","rect","on","e","stopPropagation","selectize","svg_select_points_b","window","console","log","fill"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;ACtCA,OAAMA,MAAM,mBAAAC,CAAQ,CAAR,CAAZ;AACA,oBAAAA,CAAQ,CAAR;AACA,oBAAAA,CAAQ,CAAR;AACA,oBAAAA,CAAQ,CAAR;;AAEA,OAAMC,cAAc,EAApB;;AAEA,OAAMC,OAAOH,IAAI,SAAJ,EAAeI,IAAf,CAAoB,MAApB,EAA4B,MAA5B,CAAb;AACA,OAAMC,OAAOF,KAAKE,IAAL,CAAU,EAAV,EAAc,EAAd,CAAb;;AAEAA,MAAKC,EAAL,CAAQ,OAAR,EAAkBC,CAAD,IAAO;AACpBA,OAAEC,eAAF;AACAH,UAAKI,SAAL,CAAe,EAACC,qBAAoB,IAArB,EAAf;AACH,EAHD;;AAKAV,KAAIM,EAAJ,CAAOK,MAAP,EAAe,OAAf,EAAwB,MAAM;AAC1BC,aAAQC,GAAR,CAAY,SAAZ;AACH,EAFD;;AAIA;AACAR,MAAKS,IAAL,CAAU,MAAV,E;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,IAAG;AACH,iFAAgF;AAChF,IAAG;AACH;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,+BAA8B,QAAQ;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oEAAmE;;AAEnE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAgC,eAAe,UAAU,SAAS;AAClE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA,kCAAiC,EAAE,UAAU,EAAE,UAAU,EAAE;;AAE3D;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,iCAAgC,IAAI;;AAEpC;AACA;;AAEA;AACA,+BAA8B,GAAG;;AAEjC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAe,QAAQ;AACvB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gBAAe,QAAQ;AACvB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8CAA6C,kCAAkC;AAC/E;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,IAAG;AACH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA,EAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uDAAsD,QAAQ;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wDAAuD,QAAQ;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,EAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,wDAAuD,QAAQ;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wDAAuD,QAAQ;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uCAAsC,SAAS;AAC/C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0CAAyC,QAAQ;AACjD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAmC,QAAQ;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,EAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6CAA4C,QAAQ;AACpD;;AAEA;AACA;AACA;;AAEA,UAAS;AACT;;AAEA,UAAS;AACT;;AAEA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAmC,QAAQ;AAC3C;;AAEA;AACA;AACA;;AAEA,QAAO;AACP;;AAEA,QAAO;AACP;;AAEA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uCAAsC,yBAAyB;AAC/D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAwC,QAAQ;AAChD;AACA,6CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAoB;;AAEpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA2B,KAAK;AAChC;AACA;AACA;AACA,iFAAgF,gBAAgB;AAChG;AACA;;AAEA,MAAK;AACL;AACA;AACA,QAAO;AACP;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA,iBAAgB,sBAAsB;AACtC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA,QAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gEAA+D,QAAQ;AACvE;;AAEA;AACA,QAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA,sBAAqB;AACrB,sBAAqB;AACrB,sBAAqB;AACrB,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,EAAC;;;AAGD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;;AAEP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8DAA6D,cAAc;AAC3E;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA4B,aAAa;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAoD,iEAAiE;;AAErH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,yCAAwC,mCAAmC;;AAE3E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,8CAA6C,SAAS;;AAEtD;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAsB,IAAI;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,IAAI;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;AACA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAG;;AAEH,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAA+B,QAAQ;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAqC,QAAQ;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA,EAAC;;AAED;AACA;AACA;AACA,4BAA2B;;AAE3B;AACA;AACA,QAAO,eAAe;AACtB;AACA,QAAO,aAAa;AACpB;AACA,QAAO,2BAA2B;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,EAAC;;AAED;;AAEA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B,QAAQ;AACpC;;AAEA;;AAEA,MAAK;AACL;AACA;;AAEA,MAAK;AACL;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW;AACX;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAoB;AACpB;AACA;AACA;AACA;;AAEA;;AAEA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAoB;AACpB;AACA;AACA;;AAEA;;AAEA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,MAAK;AACL;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,MAAK;AACL;AACA;;AAEA;;AAEA;;AAEA;;AAEA,2BAA0B,aAAa;;AAEvC;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gFAA+E,yBAAyB;AACxG,QAAO;AACP;AACA;;AAEA;AACA;;AAEA,QAAO;;AAEP;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA,EAAC;;AAED;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;;AAEA;AACA,kDAAiD,SAAS;AAC1D;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,kDAAiD,SAAS;AAC1D;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,kDAAiD,SAAS;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,EAAC;;AAED;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA;;AAEA,QAAO;AACP;AACA,uBAAsB;;AAEtB;AACA,wBAAuB,cAAc;AACrC;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA,MAAK;AACL;AACA;;AAEA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAuC,QAAQ;AAC/C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA,IAAG;;AAEH;AACA;AACA;;AAEA,EAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,EAAC;;AAED;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAK;;AAEL;AACA;AACA,4CAA2C,wBAAwB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,EAAC;AACD;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAkB,kCAAkC;;AAEpD;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL,yDAAwD,YAAY;AACpE;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA;;AAEA;AACA;;AAEA,EAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gEAA+D,kBAAkB;AACjF;AACA;AACA;AACA,gEAA+D,kBAAkB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,EAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4CAA2C,QAAQ;AACnD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;;AAGD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4CAA2C,QAAQ;AACnD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA,kBAAiB,+CAA+C;AAChE,kBAAiB,+CAA+C;AAChE;AACA;AACA;AACA;AACA,kBAAiB,+CAA+C;AAChE,kBAAiB,+CAA+C;AAChE;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAe,gCAAgC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAsC,mCAAmC;;AAEzE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,SAAS;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,QAAO;AACP;AACA;;AAEA;AACA,0CAAyC,QAAQ;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,EAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAmC,QAAQ;AAC3C;AACA;;AAEA;AACA;;AAEA;;AAEA,EAAC;;AAED;AACA;AACA;AACA,4BAA2B,8BAA8B;AACzD;AACA;AACA;AACA;AACA,uBAAsB,yBAAyB;AAC/C,uBAAsB,qCAAqC;AAC3D;AACA;AACA;AACA;AACA,uBAAsB,0BAA0B;AAChD,uBAAsB,uCAAuC;AAC7D;AACA;AACA;AACA,4BAA2B,aAAa;AACxC;AACA;AACA;AACA,4BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wCAAuC,QAAQ;AAC/C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAA+C,QAAQ;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAA+C,QAAQ;AACvD;AACA;;AAEA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oDAAmD,QAAQ;AAC3D;;AAEA;AACA;AACA,IAAG;AACH;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA;AACA,QAAO;AACP;AACA;;AAEA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAwC,QAAQ;AAChD;;AAEA;AACA;;AAEA;AACA;AACA,8CAA6C;AAC7C;;AAEA,EAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,EAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yCAAwC,QAAQ;AAChD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2CAA0C,QAAQ;AAClD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAgB,qDAAqD;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAO;;AAEP;AACA;AACA;;AAEA;;AAEA,EAAC;;AAED;;AAEA,EAAC,G;;;;;;AC/1KD;AACA;AACA,mCAAkC;AAClC,EAAC;;AAED;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,8CAA6C,iBAAiB;AAC9D,+CAA8C,iBAAiB;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iCAAgC,0BAA0B;;AAE1D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAiD,gBAAgB;AACjE,kDAAiD,gBAAgB;AACjE,gDAA+C,eAAe;AAC9D,iDAAgD,eAAe;;AAE/D;AACA,gCAA+B,8DAA8D;;AAE7F;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA;;AAEA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA,+DAA8D,YAAY;AAC1E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,8BAA6B,2CAA2C;;AAExE;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,oEAAmE,KAAK;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,kDAAiD;AACjD;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAG;;AAEH,EAAC,a;;;;;;AClOD;AACA;AACA,8CAA6C;AAC7C;AACA,EAAC;;AAED;;AAEA;AACA;AACA;AACA,gCAA+B;AAC/B,+BAA8B;;AAE9B;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;;AAEA;AACA;;AAEA;;AAEA;AACA,4CAA2C,SAAS;;AAEpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAwD,0CAA0C;AAClG;AACA,0BAAyB;AACzB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA0C,oCAAoC;AAC9E;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA0C,oCAAoC;AAC9E,kBAAiB;;AAEjB;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,0DAAyD,iBAAiB;AAC1E,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc;;AAEd;;AAEA,eAAc;;AAEd;AACA,uFAAsF,iBAAiB,EAAE;AACzG,uDAAsD,iBAAiB;AACvE,eAAc;AACd,8DAA6D,iBAAiB,EAAE;AAChF;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iFAAgF;;AAEhF;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;;;;;;ACtTD;AACA;AACA,8CAA6C;AAC7C,EAAC;;AAED;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA4C,iCAAiC,EAAE,EAAE;AACjF,6CAA4C,iCAAiC,EAAE,EAAE;AACjF,6CAA4C,iCAAiC,EAAE,EAAE;AACjF,6CAA4C,iCAAiC,EAAE,EAAE;;AAEjF,4CAA2C,iCAAiC,EAAE,EAAE;AAChF,4CAA2C,iCAAiC,EAAE,EAAE;AAChF,4CAA2C,iCAAiC,EAAE,EAAE;AAChF,4CAA2C,iCAAiC,EAAE,EAAE;;AAEhF,8CAA6C,iCAAiC,EAAE,EAAE;;AAElF,gDAA+C,iCAAiC,EAAE,EAAE;;AAEpF;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,wBAAuB;;AAEvoCAAmC;;AAEnC;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sCAAqC,2DAA2D;AAChG;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,mCAAkC,mCAAmC;AACrE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,4FAA2F;;AAE3F;;AAEA;;AAEA,MAAK;;AAEL;AACA;AACA;AACA,uBAAsB;AACtB;;AAEA,EAAC","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./app/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap aa7d8a52b2990c8c478b","const SVG = require('svg.js');\nrequire('svg.draggable.js');\nrequire('svg.select.js');\nrequire('svg.resize.js');\n\nconst groupSelect = [];\n\nconst draw = SVG('drawing').size('100%', '100%');\nconst rect = draw.rect(50, 50);\n\nrect.on('click', (e) => {\n    e.stopPropagation()\n    rect.selectize({svg_select_points_b:true});\n});\n\nSVG.on(window, 'click', () => {\n    console.log('unclick');\n});\n\n// const rect = draw.rect(50, 50).selectize({svg_select_points_b:true}).resize();\nrect.fill('#f06');\n\n\n// WEBPACK FOOTER //\n// ./app/index.js","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.3.7\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Sat Jan 14 2017 07:23:18 GMT+0100 (CET)\n*/;\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(function(){\n      return factory(root, root.document)\n    })\n  } else if (typeof exports === 'object') {\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) }\n  } else {\n    root.SVG = factory(root, root.document)\n  }\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\n\n// The main wrapping element\nvar SVG = this.SVG = function(element) {\n  if (SVG.supported) {\n    element = new SVG.Doc(element)\n\n    if(!SVG.parser.draw)\n      SVG.prepare()\n\n    return element\n  }\n}\n\n// Default namespaces\nSVG.ns    = 'http://www.w3.org/2000/svg'\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\nSVG.xlink = 'http://www.w3.org/1999/xlink'\nSVG.svgjs = 'http://svgjs.com/svgjs'\n\n// Svg support test\nSVG.supported = (function() {\n  return !! document.createElementNS &&\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\n})()\n\n// Don't bother to continue if SVG is not supported\nif (!SVG.supported) return false\n\n// Element id sequence\nSVG.did  = 1000\n\n// Get next named element id\nSVG.eid = function(name) {\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\n}\n\n// Method for element creation\nSVG.create = function(name) {\n  // create element\n  var element = document.createElementNS(this.ns, name)\n\n  // apply unique id\n  element.setAttribute('id', this.eid(name))\n\n  return element\n}\n\n// Method for extending objects\nSVG.extend = function() {\n  var modules, methods, key, i\n\n  // Get list of modules\n  modules = [].slice.call(arguments)\n\n  // Get object with extensions\n  methods = modules.pop()\n\n  for (i = modules.length - 1; i >= 0; i--)\n    if (modules[i])\n      for (key in methods)\n        modules[i].prototype[key] = methods[key]\n\n  // Make sure SVG.Set inherits any newly added methods\n  if (SVG.Set && SVG.Set.inherit)\n    SVG.Set.inherit()\n}\n\n// Invent new element\nSVG.invent = function(config) {\n  // Create element initializer\n  var initializer = typeof config.create == 'function' ?\n    config.create :\n    function() {\n      this.constructor.call(this, SVG.create(config.create))\n    }\n\n  // Inherit prototype\n  if (config.inherit)\n    initializer.prototype = new config.inherit\n\n  // Extend with methods\n  if (config.extend)\n    SVG.extend(initializer, config.extend)\n\n  // Attach construct method to parent\n  if (config.construct)\n    SVG.extend(config.parent || SVG.Container, config.construct)\n\n  return initializer\n}\n\n// Adopt existing svg elements\nSVG.adopt = function(node) {\n  // check for presence of node\n  if (!node) return null\n\n  // make sure a node isn't already adopted\n  if (node.instance) return node.instance\n\n  // initialize variables\n  var element\n\n  // adopt with element-specific settings\n  if (node.nodeName == 'svg')\n    element = node.parentNode instanceof SVGElement ? new SVG.Nested : new SVG.Doc\n  else if (node.nodeName == 'linearGradient')\n    element = new SVG.Gradient('linear')\n  else if (node.nodeName == 'radialGradient')\n    element = new SVG.Gradient('radial')\n  else if (SVG[capitalize(node.nodeName)])\n    element = new SVG[capitalize(node.nodeName)]\n  else\n    element = new SVG.Element(node)\n\n  // ensure references\n  element.type  = node.nodeName\n  element.node  = node\n  node.instance = element\n\n  // SVG.Class specific preparations\n  if (element instanceof SVG.Doc)\n    element.namespace().defs()\n\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\n\n  return element\n}\n\n// Initialize parsing element\nSVG.prepare = function() {\n  // Select document body and create invisible svg element\n  var body = document.getElementsByTagName('body')[0]\n    , draw = (body ? new SVG.Doc(body) :  new SVG.Doc(document.documentElement).nested()).size(2, 0)\n\n  // Create parser object\n  SVG.parser = {\n    body: body || document.documentElement\n  , draw: draw.style('opacity:0;position:fixed;left:100%;top:100%;overflow:hidden')\n  , poly: draw.polyline().node\n  , path: draw.path().node\n  , native: SVG.create('svg')\n  }\n}\n\nSVG.parser = {\n  native: SVG.create('svg')\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  if(!SVG.parser.draw)\n    SVG.prepare()\n}, false)\n\n// Storage for regular expressions\nSVG.regex = {\n  // Parse unit value\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\n\n  // Parse hex value\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\n\n  // Parse rgb value\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\n\n  // Parse reference id\n, reference:        /#([a-z0-9\\-_]+)/i\n\n  // Parse matrix wrapper\n, matrix:           /matrix\\(|\\)/g\n\n  // Elements of a matrix\n, matrixElements:   /,*\\s+|,/\n\n  // Whitespace\n, whitespace:       /\\s/g\n\n  // Test hex value\n, isHex:            /^#[a-f0-9]{3,6}$/i\n\n  // Test rgb value\n, isRgb:            /^rgb\\(/\n\n  // Test css declaration\n, isCss:            /[^:]+:[^;]+;?/\n\n  // Test for blank string\n, isBlank:          /^(\\s+)?$/\n\n  // Test for numeric string\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\n\n  // Test for percent value\n, isPercent:        /^-?[\\d\\.]+%$/\n\n  // Test for image url\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\n\n  // The following regex are used to parse the d attribute of a path\n\n  // Replaces all negative exponents\n, negExp:           /e\\-/gi\n\n  // Replaces all comma\n, comma:            /,/g\n\n  // Replaces all hyphens\n, hyphen:           /\\-/g\n\n  // Replaces and tests for all path letters\n, pathLetters:      /[MLHVCSQTAZ]/gi\n\n  // yes we need this one, too\n, isPathLetter:     /[MLHVCSQTAZ]/i\n\n  // split at whitespaces\n, whitespaces:      /\\s+/\n\n  // matches X\n, X:                /X/g\n}\n\nSVG.utils = {\n  // Map function\n  map: function(array, block) {\n    var i\n      , il = array.length\n      , result = []\n\n    for (i = 0; i < il; i++)\n      result.push(block(array[i]))\n\n    return result\n  }\n\n  // Filter function\n, filter: function(array, block) {\n    var i\n      , il = array.length\n      , result = []\n\n    for (i = 0; i < il; i++)\n      if (block(array[i]))\n        result.push(array[i])\n\n    return result\n  }\n\n  // Degrees to radians\n, radians: function(d) {\n    return d % 360 * Math.PI / 180\n  }\n\n  // Radians to degrees\n, degrees: function(r) {\n    return r * 180 / Math.PI % 360\n  }\n\n, filterSVGElements: function(nodes) {\n    return this.filter( nodes, function(el) { return el instanceof SVGElement })\n  }\n\n}\n\nSVG.defaults = {\n  // Default attribute values\n  attrs: {\n    // fill and stroke\n    'fill-opacity':     1\n  , 'stroke-opacity':   1\n  , 'stroke-width':     0\n  , 'stroke-linejoin':  'miter'\n  , 'stroke-linecap':   'butt'\n  , fill:               '#000000'\n  , stroke:             '#000000'\n  , opacity:            1\n    // position\n  , x:                  0\n  , y:                  0\n  , cx:                 0\n  , cy:                 0\n    // size\n  , width:              0\n  , height:             0\n    // radius\n  , r:                  0\n  , rx:                 0\n  , ry:                 0\n    // gradient\n  , offset:             0\n  , 'stop-opacity':     1\n  , 'stop-color':       '#000000'\n    // text\n  , 'font-size':        16\n  , 'font-family':      'Helvetica, Arial, sans-serif'\n  , 'text-anchor':      'start'\n  }\n\n}\n// Module for color convertions\nSVG.Color = function(color) {\n  var match\n\n  // initialize defaults\n  this.r = 0\n  this.g = 0\n  this.b = 0\n\n  if(!color) return\n\n  // parse color\n  if (typeof color === 'string') {\n    if (SVG.regex.isRgb.test(color)) {\n      // get rgb values\n      match = SVG.regex.rgb.exec(color.replace(/\\s/g,''))\n\n      // parse numeric values\n      this.r = parseInt(match[1])\n      this.g = parseInt(match[2])\n      this.b = parseInt(match[3])\n\n    } else if (SVG.regex.isHex.test(color)) {\n      // get hex values\n      match = SVG.regex.hex.exec(fullHex(color))\n\n      // parse numeric values\n      this.r = parseInt(match[1], 16)\n      this.g = parseInt(match[2], 16)\n      this.b = parseInt(match[3], 16)\n\n    }\n\n  } else if (typeof color === 'object') {\n    this.r = color.r\n    this.g = color.g\n    this.b = color.b\n\n  }\n\n}\n\nSVG.extend(SVG.Color, {\n  // Default to hex conversion\n  toString: function() {\n    return this.toHex()\n  }\n  // Build hex value\n, toHex: function() {\n    return '#'\n      + compToHex(this.r)\n      + compToHex(this.g)\n      + compToHex(this.b)\n  }\n  // Build rgb value\n, toRgb: function() {\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\n  }\n  // Calculate true brightness\n, brightness: function() {\n    return (this.r / 255 * 0.30)\n         + (this.g / 255 * 0.59)\n         + (this.b / 255 * 0.11)\n  }\n  // Make color morphable\n, morph: function(color) {\n    this.destination = new SVG.Color(color)\n\n    return this\n  }\n  // Get morphed color at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    // normalise pos\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\n\n    // generate morphed color\n    return new SVG.Color({\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\n    })\n  }\n\n})\n\n// Testers\n\n// Test if given value is a color string\nSVG.Color.test = function(color) {\n  color += ''\n  return SVG.regex.isHex.test(color)\n      || SVG.regex.isRgb.test(color)\n}\n\n// Test if given value is a rgb object\nSVG.Color.isRgb = function(color) {\n  return color && typeof color.r == 'number'\n               && typeof color.g == 'number'\n               && typeof color.b == 'number'\n}\n\n// Test if given value is a color\nSVG.Color.isColor = function(color) {\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\n}\n// Module for array conversion\nSVG.Array = function(array, fallback) {\n  array = (array || []).valueOf()\n\n  // if array is empty and fallback is provided, use fallback\n  if (array.length == 0 && fallback)\n    array = fallback.valueOf()\n\n  // parse array\n  this.value = this.parse(array)\n}\n\nSVG.extend(SVG.Array, {\n  // Make array morphable\n  morph: function(array) {\n    this.destination = this.parse(array)\n\n    // normalize length of arrays\n    if (this.value.length != this.destination.length) {\n      var lastValue       = this.value[this.value.length - 1]\n        , lastDestination = this.destination[this.destination.length - 1]\n\n      while(this.value.length > this.destination.length)\n        this.destination.push(lastDestination)\n      while(this.value.length < this.destination.length)\n        this.value.push(lastValue)\n    }\n\n    return this\n  }\n  // Clean up any duplicate points\n, settle: function() {\n    // find all unique values\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\n      if (seen.indexOf(this.value[i]) == -1)\n        seen.push(this.value[i])\n\n    // set new value\n    return this.value = seen\n  }\n  // Get morphed array at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    // generate morphed array\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\n\n    return new SVG.Array(array)\n  }\n  // Convert array to string\n, toString: function() {\n    return this.value.join(' ')\n  }\n  // Real value\n, valueOf: function() {\n    return this.value\n  }\n  // Parse whitespace separated string\n, parse: function(array) {\n    array = array.valueOf()\n\n    // if already is an array, no need to parse it\n    if (Array.isArray(array)) return array\n\n    return this.split(array)\n  }\n  // Strip unnecessary whitespace\n, split: function(string) {\n    return string.trim().split(/\\s+/)\n  }\n  // Reverse array\n, reverse: function() {\n    this.value.reverse()\n\n    return this\n  }\n\n})\n// Poly points array\nSVG.PointArray = function(array, fallback) {\n  this.constructor.call(this, array, fallback || [[0,0]])\n}\n\n// Inherit from SVG.Array\nSVG.PointArray.prototype = new SVG.Array\n\nSVG.extend(SVG.PointArray, {\n  // Convert array to string\n  toString: function() {\n    // convert to a poly point string\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\n      array.push(this.value[i].join(','))\n\n    return array.join(' ')\n  }\n  // Convert array to line object\n, toLine: function() {\n    return {\n      x1: this.value[0][0]\n    , y1: this.value[0][1]\n    , x2: this.value[1][0]\n    , y2: this.value[1][1]\n    }\n  }\n  // Get morphed array at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    // generate morphed point string\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\n      array.push([\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\n      ])\n\n    return new SVG.PointArray(array)\n  }\n  // Parse point string\n, parse: function(array) {\n    var points = []\n\n    array = array.valueOf()\n\n    // if already is an array, no need to parse it\n    if (Array.isArray(array)) return array\n\n    // parse points\n    array = array.trim().split(/\\s+|,/)\n\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n    if (array.length % 2 !== 0) array.pop()\n\n    // wrap points in two-tuples and parse points as floats\n    for(var i = 0, len = array.length; i < len; i = i + 2)\n      points.push([ parseFloat(array[i]), parseFloat(array[i+1]) ])\n\n    return points\n  }\n  // Move point string\n, move: function(x, y) {\n    var box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    // move every point\n    if (!isNaN(x) && !isNaN(y))\n      for (var i = this.value.length - 1; i >= 0; i--)\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\n\n    return this\n  }\n  // Resize poly string\n, size: function(width, height) {\n    var i, box = this.bbox()\n\n    // recalculate position of all points according to new size\n    for (i = this.value.length - 1; i >= 0; i--) {\n      this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\n      this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\n    }\n\n    return this\n  }\n  // Get bounding box of points\n, bbox: function() {\n    SVG.parser.poly.setAttribute('points', this.toString())\n\n    return SVG.parser.poly.getBBox()\n  }\n\n})\n// Path points array\nSVG.PathArray = function(array, fallback) {\n  this.constructor.call(this, array, fallback || [['M', 0, 0]])\n}\n\n// Inherit from SVG.Array\nSVG.PathArray.prototype = new SVG.Array\n\nSVG.extend(SVG.PathArray, {\n  // Convert array to string\n  toString: function() {\n    return arrayToString(this.value)\n  }\n  // Move path string\n, move: function(x, y) {\n    // get bounding box of current situation\n    var box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    if (!isNaN(x) && !isNaN(y)) {\n      // move every point\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\n        l = this.value[i][0]\n\n        if (l == 'M' || l == 'L' || l == 'T')  {\n          this.value[i][1] += x\n          this.value[i][2] += y\n\n        } else if (l == 'H')  {\n          this.value[i][1] += x\n\n        } else if (l == 'V')  {\n          this.value[i][1] += y\n\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\n          this.value[i][1] += x\n          this.value[i][2] += y\n          this.value[i][3] += x\n          this.value[i][4] += y\n\n          if (l == 'C')  {\n            this.value[i][5] += x\n            this.value[i][6] += y\n          }\n\n        } else if (l == 'A')  {\n          this.value[i][6] += x\n          this.value[i][7] += y\n        }\n\n      }\n    }\n\n    return this\n  }\n  // Resize path string\n, size: function(width, height) {\n    // get bounding box of current situation\n    var i, l, box = this.bbox()\n\n    // recalculate position of all points according to new size\n    for (i = this.value.length - 1; i >= 0; i--) {\n      l = this.value[i][0]\n\n      if (l == 'M' || l == 'L' || l == 'T')  {\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\n\n      } else if (l == 'H')  {\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\n\n      } else if (l == 'V')  {\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\n\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\n\n        if (l == 'C')  {\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\n        }\n\n      } else if (l == 'A')  {\n        // resize radii\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\n        this.value[i][2] = (this.value[i][2] * height) / box.height\n\n        // move position values\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\n      }\n\n    }\n\n    return this\n  }\n  // Test if the passed path array use the same path data commands as this path array\n, equalCommands: function(pathArray) {\n    var i, il, equalCommands\n\n    pathArray = new SVG.PathArray(pathArray)\n\n    equalCommands = this.value.length === pathArray.value.length\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\n    }\n\n    return equalCommands\n  }\n  // Make path array morphable\n, morph: function(pathArray) {\n    pathArray = new SVG.PathArray(pathArray)\n\n    if(this.equalCommands(pathArray)) {\n      this.destination = pathArray\n    } else {\n      this.destination = null\n    }\n\n    return this\n  }\n  // Get morphed path array at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    var sourceArray = this.value\n      , destinationArray = this.destination.value\n      , array = [], pathArray = new SVG.PathArray()\n      , i, il, j, jl\n\n    // Animate has specified in the SVG spec\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\n    for (i = 0, il = sourceArray.length; i < il; i++) {\n      array[i] = [sourceArray[i][0]]\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\n      }\n      // For the two flags of the elliptical arc command, the SVG spec say:\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\n      // Elliptical arc command as an array followed by corresponding indexes:\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n      //   0    1   2        3                 4             5      6  7\n      if(array[i][0] === 'A') {\n        array[i][4] = +(array[i][4] != 0)\n        array[i][5] = +(array[i][5] != 0)\n      }\n    }\n\n    // Directly modify the value of a path array, this is done this way for performance\n    pathArray.value = array\n    return pathArray\n  }\n  // Absolutize and parse path to array\n, parse: function(array) {\n    // if it's already a patharray, no need to parse it\n    if (array instanceof SVG.PathArray) return array.valueOf()\n\n    // prepare for parsing\n    var i, x0, y0, s, seg, arr\n      , x = 0\n      , y = 0\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7 }\n\n    if(typeof array == 'string'){\n\n      array = array\n        .replace(SVG.regex.negExp, 'X')         // replace all negative exponents with certain char\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\n        .replace(SVG.regex.hyphen, ' -')        // add space before hyphen\n        .replace(SVG.regex.comma, ' ')          // unify all spaces\n        .replace(SVG.regex.X, 'e-')             // add back the expoent\n        .trim()                                 // trim\n        .split(SVG.regex.whitespaces)           // split into array\n\n      // at this place there could be parts like ['3.124.854.32'] because we could not determine the point as seperator till now\n      // we fix this elements in the next loop\n      for(i = array.length; --i;){\n        if(array[i].indexOf('.') != array[i].lastIndexOf('.')){\n          var split = array[i].split('.') // split at the point\n          var first = [split.shift(), split.shift()].join('.') // join the first number together\n          array.splice.apply(array, [i, 1].concat(first, split.map(function(el){ return '.'+el }))) // add first and all other entries back to array\n        }\n      }\n\n    }else{\n      array = array.reduce(function(prev, curr){\n        return [].concat.apply(prev, curr)\n      }, [])\n    }\n\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\n\n    var arr = []\n\n    do{\n\n      // Test if we have a path letter\n      if(SVG.regex.isPathLetter.test(array[0])){\n        s = array[0]\n        array.shift()\n      // If last letter was a move command and we got no new, it defaults to [L]ine\n      }else if(s == 'M'){\n        s = 'L'\n      }else if(s == 'm'){\n        s = 'l'\n      }\n\n      // add path letter as first element\n      seg = [s.toUpperCase()]\n\n      // push all necessary parameters to segment\n      for(i = 0; i < paramCnt[seg[0]]; ++i){\n        seg.push(parseFloat(array.shift()))\n      }\n\n      // upper case\n      if(s == seg[0]){\n\n        if(s == 'M' || s == 'L' || s == 'C' || s == 'Q' || s == 'S' || s == 'T'){\n          x = seg[paramCnt[seg[0]]-1]\n          y = seg[paramCnt[seg[0]]]\n        }else if(s == 'V'){\n          y = seg[1]\n        }else if(s == 'H'){\n          x = seg[1]\n        }else if(s == 'A'){\n          x = seg[6]\n          y = seg[7]\n        }\n\n      // lower case\n      }else{\n\n        // convert relative to absolute values\n        if(s == 'm' || s == 'l' || s == 'c' || s == 's' || s == 'q' || s == 't'){\n\n          seg[1] += x\n          seg[2] += y\n\n          if(seg[3] != null){\n            seg[3] += x\n            seg[4] += y\n          }\n\n          if(seg[5] != null){\n            seg[5] += x\n            seg[6] += y\n          }\n\n          // move pointer\n          x = seg[paramCnt[seg[0]]-1]\n          y = seg[paramCnt[seg[0]]]\n\n        }else if(s == 'v'){\n          seg[1] += y\n          y = seg[1]\n        }else if(s == 'h'){\n          seg[1] += x\n          x = seg[1]\n        }else if(s == 'a'){\n          seg[6] += x\n          seg[7] += y\n          x = seg[6]\n          y = seg[7]\n        }\n\n      }\n\n      if(seg[0] == 'M'){\n        x0 = x\n        y0 = y\n      }\n\n      if(seg[0] == 'Z'){\n        x = x0\n        y = y0\n      }\n\n      arr.push(seg)\n\n    }while(array.length)\n\n    return arr\n\n  }\n  // Get bounding box of path\n, bbox: function() {\n    SVG.parser.path.setAttribute('d', this.toString())\n\n    return SVG.parser.path.getBBox()\n  }\n\n})\n\n// Module for unit convertions\nSVG.Number = SVG.invent({\n  // Initialize\n  create: function(value, unit) {\n    // initialize defaults\n    this.value = 0\n    this.unit  = unit || ''\n\n    // parse value\n    if (typeof value === 'number') {\n      // ensure a valid numeric value\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\n\n    } else if (typeof value === 'string') {\n      unit = value.match(SVG.regex.numberAndUnit)\n\n      if (unit) {\n        // make value numeric\n        this.value = parseFloat(unit[1])\n\n        // normalize\n        if (unit[5] == '%')\n          this.value /= 100\n        else if (unit[5] == 's')\n          this.value *= 1000\n\n        // store unit\n        this.unit = unit[5]\n      }\n\n    } else {\n      if (value instanceof SVG.Number) {\n        this.value = value.valueOf()\n        this.unit  = value.unit\n      }\n    }\n\n  }\n  // Add methods\n, extend: {\n    // Stringalize\n    toString: function() {\n      return (\n        this.unit == '%' ?\n          ~~(this.value * 1e8) / 1e6:\n        this.unit == 's' ?\n          this.value / 1e3 :\n          this.value\n      ) + this.unit\n    }\n  , toJSON: function() {\n      return this.toString()\n    }\n  , // Convert to primitive\n    valueOf: function() {\n      return this.value\n    }\n    // Add number\n  , plus: function(number) {\n      return new SVG.Number(this + new SVG.Number(number), this.unit)\n    }\n    // Subtract number\n  , minus: function(number) {\n      return this.plus(-new SVG.Number(number))\n    }\n    // Multiply number\n  , times: function(number) {\n      return new SVG.Number(this * new SVG.Number(number), this.unit)\n    }\n    // Divide number\n  , divide: function(number) {\n      return new SVG.Number(this / new SVG.Number(number), this.unit)\n    }\n    // Convert to different unit\n  , to: function(unit) {\n      var number = new SVG.Number(this)\n\n      if (typeof unit === 'string')\n        number.unit = unit\n\n      return number\n    }\n    // Make number morphable\n  , morph: function(number) {\n      this.destination = new SVG.Number(number)\n\n      return this\n    }\n    // Get morphed number at given position\n  , at: function(pos) {\n      // Make sure a destination is defined\n      if (!this.destination) return this\n\n      // Generate new morphed number\n      return new SVG.Number(this.destination)\n          .minus(this)\n          .times(pos)\n          .plus(this)\n    }\n\n  }\n})\n\nSVG.Element = SVG.invent({\n  // Initialize node\n  create: function(node) {\n    // make stroke value accessible dynamically\n    this._stroke = SVG.defaults.attrs.stroke\n\n    // initialize data object\n    this.dom = {}\n\n    // create circular reference\n    if (this.node = node) {\n      this.type = node.nodeName\n      this.node.instance = this\n\n      // store current attribute value\n      this._stroke = node.getAttribute('stroke') || this._stroke\n    }\n  }\n\n  // Add class methods\n, extend: {\n    // Move over x-axis\n    x: function(x) {\n      return this.attr('x', x)\n    }\n    // Move over y-axis\n  , y: function(y) {\n      return this.attr('y', y)\n    }\n    // Move by center over x-axis\n  , cx: function(x) {\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\n    }\n    // Move by center over y-axis\n  , cy: function(y) {\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\n    }\n    // Move element to given x and y values\n  , move: function(x, y) {\n      return this.x(x).y(y)\n    }\n    // Move element by its center\n  , center: function(x, y) {\n      return this.cx(x).cy(y)\n    }\n    // Set width of element\n  , width: function(width) {\n      return this.attr('width', width)\n    }\n    // Set height of element\n  , height: function(height) {\n      return this.attr('height', height)\n    }\n    // Set element size to given width and height\n  , size: function(width, height) {\n      var p = proportionalSize(this, width, height)\n\n      return this\n        .width(new SVG.Number(p.width))\n        .height(new SVG.Number(p.height))\n    }\n    // Clone element\n  , clone: function(parent) {\n      // clone element and assign new id\n      var clone = assignNewId(this.node.cloneNode(true))\n\n      // insert the clone in the given parent or after myself\n      if(parent) parent.add(clone)\n      else this.after(clone)\n\n      return clone\n    }\n    // Remove element\n  , remove: function() {\n      if (this.parent())\n        this.parent().removeElement(this)\n\n      return this\n    }\n    // Replace element\n  , replace: function(element) {\n      this.after(element).remove()\n\n      return element\n    }\n    // Add element to given container and return self\n  , addTo: function(parent) {\n      return parent.put(this)\n    }\n    // Add element to given container and return container\n  , putIn: function(parent) {\n      return parent.add(this)\n    }\n    // Get / set id\n  , id: function(id) {\n      return this.attr('id', id)\n    }\n    // Checks whether the given point inside the bounding box of the element\n  , inside: function(x, y) {\n      var box = this.bbox()\n\n      return x > box.x\n          && y > box.y\n          && x < box.x + box.width\n          && y < box.y + box.height\n    }\n    // Show element\n  , show: function() {\n      return this.style('display', '')\n    }\n    // Hide element\n  , hide: function() {\n      return this.style('display', 'none')\n    }\n    // Is element visible?\n  , visible: function() {\n      return this.style('display') != 'none'\n    }\n    // Return id on string conversion\n  , toString: function() {\n      return this.attr('id')\n    }\n    // Return array of classes on the node\n  , classes: function() {\n      var attr = this.attr('class')\n\n      return attr == null ? [] : attr.trim().split(/\\s+/)\n    }\n    // Return true if class exists on the node, false otherwise\n  , hasClass: function(name) {\n      return this.classes().indexOf(name) != -1\n    }\n    // Add class to the node\n  , addClass: function(name) {\n      if (!this.hasClass(name)) {\n        var array = this.classes()\n        array.push(name)\n        this.attr('class', array.join(' '))\n      }\n\n      return this\n    }\n    // Remove class from the node\n  , removeClass: function(name) {\n      if (this.hasClass(name)) {\n        this.attr('class', this.classes().filter(function(c) {\n          return c != name\n        }).join(' '))\n      }\n\n      return this\n    }\n    // Toggle the presence of a class on the node\n  , toggleClass: function(name) {\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\n    }\n    // Get referenced element form attribute value\n  , reference: function(attr) {\n      return SVG.get(this.attr(attr))\n    }\n    // Returns the parent element instance\n  , parent: function(type) {\n      var parent = this\n\n      // check for parent\n      if(!parent.node.parentNode) return null\n\n      // get parent element\n      parent = SVG.adopt(parent.node.parentNode)\n\n      if(!type) return parent\n\n      // loop trough ancestors if type is given\n      while(parent && parent.node instanceof SVGElement){\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\n        parent = SVG.adopt(parent.node.parentNode)\n      }\n    }\n    // Get parent document\n  , doc: function() {\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\n    }\n    // return array of all ancestors of given type up to the root svg\n  , parents: function(type) {\n      var parents = [], parent = this\n\n      do{\n        parent = parent.parent(type)\n        if(!parent || !parent.node) break\n\n        parents.push(parent)\n      } while(parent.parent)\n\n      return parents\n    }\n    // matches the element vs a css selector\n  , matches: function(selector){\n      return matches(this.node, selector)\n    }\n    // Returns the svg node to call native svg methods on it\n  , native: function() {\n      return this.node\n    }\n    // Import raw svg\n  , svg: function(svg) {\n      // create temporary holder\n      var well = document.createElement('svg')\n\n      // act as a setter if svg is given\n      if (svg && this instanceof SVG.Parent) {\n        // dump raw svg\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<(\\w+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\n\n        // transplant nodes\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\n          this.node.appendChild(well.firstChild.firstChild)\n\n      // otherwise act as a getter\n      } else {\n        // create a wrapping svg element in case of partial content\n        well.appendChild(svg = document.createElement('svg'))\n\n        // write svgjs data to the dom\n        this.writeDataToDom()\n\n        // insert a copy of this node\n        svg.appendChild(this.node.cloneNode(true))\n\n        // return target element\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\n      }\n\n      return this\n    }\n  // write svgjs data to the dom\n  , writeDataToDom: function() {\n\n      // dump variables recursively\n      if(this.each || this.lines){\n        var fn = this.each ? this : this.lines();\n        fn.each(function(){\n          this.writeDataToDom()\n        })\n      }\n\n      // remove previously set data\n      this.node.removeAttribute('svgjs:data')\n\n      if(Object.keys(this.dom).length)\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\n\n      return this\n    }\n  // set given data to the elements data property\n  , setData: function(o){\n      this.dom = o\n      return this\n    }\n  , is: function(obj){\n      return is(this, obj)\n    }\n  }\n})\n\nSVG.easing = {\n  '-': function(pos){return pos}\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\n}\n\nSVG.morph = function(pos){\n  return function(from, to) {\n    return new SVG.MorphObj(from, to).at(pos)\n  }\n}\n\nSVG.Situation = SVG.invent({\n\n  create: function(o){\n    this.init = false\n    this.reversed = false\n    this.reversing = false\n\n    this.duration = new SVG.Number(o.duration).valueOf()\n    this.delay = new SVG.Number(o.delay).valueOf()\n\n    this.start = +new Date() + this.delay\n    this.finish = this.start + this.duration\n    this.ease = o.ease\n\n    // this.loop is incremented from 0 to this.loops\n    // it is also incremented when in an infinite loop (when this.loops is true)\n    this.loop = 0\n    this.loops = false\n\n    this.animations = {\n      // functionToCall: [list of morphable objects]\n      // e.g. move: [SVG.Number, SVG.Number]\n    }\n\n    this.attrs = {\n      // holds all attributes which are not represented from a function svg.js provides\n      // e.g. someAttr: SVG.Number\n    }\n\n    this.styles = {\n      // holds all styles which should be animated\n      // e.g. fill-color: SVG.Color\n    }\n\n    this.transforms = [\n      // holds all transformations as transformation objects\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\n    ]\n\n    this.once = {\n      // functions to fire at a specific position\n      // e.g. \"0.5\": function foo(){}\n    }\n\n  }\n\n})\n\n\nSVG.FX = SVG.invent({\n\n  create: function(element) {\n    this._target = element\n    this.situations = []\n    this.active = false\n    this.situation = null\n    this.paused = false\n    this.lastPos = 0\n    this.pos = 0\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\n    this.absPos = 0\n    this._speed = 1\n  }\n\n, extend: {\n\n    /**\n     * sets or returns the target of this animation\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\n     * @param ease function || string Function which should be used for easing or easing keyword\n     * @param delay Number indicating the delay before the animation starts\n     * @return target || this\n     */\n    animate: function(o, ease, delay){\n\n      if(typeof o == 'object'){\n        ease = o.ease\n        delay = o.delay\n        o = o.duration\n      }\n\n      var situation = new SVG.Situation({\n        duration: o || 1000,\n        delay: delay || 0,\n        ease: SVG.easing[ease || '-'] || ease\n      })\n\n      this.queue(situation)\n\n      return this\n    }\n\n    /**\n     * sets a delay before the next element of the queue is called\n     * @param delay Duration of delay in milliseconds\n     * @return this.target()\n     */\n  , delay: function(delay){\n      // The delay is performed by an empty situation with its duration\n      // attribute set to the duration of the delay\n      var situation = new SVG.Situation({\n        duration: delay,\n        delay: 0,\n        ease: SVG.easing['-']\n      })\n\n      return this.queue(situation)\n    }\n\n    /**\n     * sets or returns the target of this animation\n     * @param null || target SVG.Element which should be set as new target\n     * @return target || this\n     */\n  , target: function(target){\n      if(target && target instanceof SVG.Element){\n        this._target = target\n        return this\n      }\n\n      return this._target\n    }\n\n    // returns the absolute position at a given time\n  , timeToAbsPos: function(timestamp){\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\n    }\n\n    // returns the timestamp from a given absolute positon\n  , absPosToTime: function(absPos){\n      return this.situation.duration/this._speed * absPos + this.situation.start\n    }\n\n    // starts the animationloop\n  , startAnimFrame: function(){\n      this.stopAnimFrame()\n      this.animationFrame = requestAnimationFrame(function(){ this.step() }.bind(this))\n    }\n\n    // cancels the animationframe\n  , stopAnimFrame: function(){\n      cancelAnimationFrame(this.animationFrame)\n    }\n\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\n  , start: function(){\n      // dont start if already started\n      if(!this.active && this.situation){\n        this.active = true\n        this.startCurrent()\n      }\n\n      return this\n    }\n\n    // start the current situation\n  , startCurrent: function(){\n      this.situation.start = +new Date + this.situation.delay/this._speed\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\n      return this.initAnimations().step()\n    }\n\n    /**\n     * adds a function / Situation to the animation queue\n     * @param fn function / situation to add\n     * @return this\n     */\n  , queue: function(fn){\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\n        this.situations.push(fn)\n\n      if(!this.situation) this.situation = this.situations.shift()\n\n      return this\n    }\n\n    /**\n     * pulls next element from the queue and execute it\n     * @return this\n     */\n  , dequeue: function(){\n      // stop current animation\n      this.situation && this.situation.stop && this.situation.stop()\n\n      // get next animation from queue\n      this.situation = this.situations.shift()\n\n      if(this.situation){\n        if(this.situation instanceof SVG.Situation) {\n          this.startCurrent()\n        } else {\n          // If it is not a SVG.Situation, then it is a function, we execute it\n          this.situation.call(this)\n        }\n      }\n\n      return this\n    }\n\n    // updates all animations to the current state of the element\n    // this is important when one property could be changed from another property\n  , initAnimations: function() {\n      var i\n      var s = this.situation\n\n      if(s.init) return this\n\n      for(i in s.animations){\n\n        if(i == 'viewbox'){\n          s.animations[i] = this.target().viewbox().morph(s.animations[i])\n        }else{\n\n          // TODO: this is not a clean clone of the array. We may have some unchecked references\n          s.animations[i].value = (i == 'plot' ? this.target().array().value : this.target()[i]())\n\n          // sometimes we get back an object and not the real value, fix this\n          if(s.animations[i].value.value){\n            s.animations[i].value = s.animations[i].value.value\n          }\n\n          if(s.animations[i].relative)\n            s.animations[i].destination.value = s.animations[i].destination.value + s.animations[i].value\n\n        }\n\n      }\n\n      for(i in s.attrs){\n        if(s.attrs[i] instanceof SVG.Color){\n          var color = new SVG.Color(this.target().attr(i))\n          s.attrs[i].r = color.r\n          s.attrs[i].g = color.g\n          s.attrs[i].b = color.b\n        }else{\n          s.attrs[i].value = this.target().attr(i)// + s.attrs[i].value\n        }\n      }\n\n      for(i in s.styles){\n        s.styles[i].value = this.target().style(i)\n      }\n\n      s.initialTransformation = this.target().matrixify()\n\n      s.init = true\n      return this\n    }\n  , clearQueue: function(){\n      this.situations = []\n      return this\n    }\n  , clearCurrent: function(){\n      this.situation = null\n      return this\n    }\n    /** stops the animation immediately\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\n     * @return this\n     */\n  , stop: function(jumpToEnd, clearQueue){\n      if(!this.active) this.start()\n\n      if(clearQueue){\n        this.clearQueue()\n      }\n\n      this.active = false\n\n      if(jumpToEnd && this.situation){\n        this.atEnd()\n      }\n\n      this.stopAnimFrame()\n\n      return this.clearCurrent()\n    }\n\n    /** resets the element to the state where the current element has started\n     * @return this\n     */\n  , reset: function(){\n      if(this.situation){\n        var temp = this.situation\n        this.stop()\n        this.situation = temp\n        this.atStart()\n      }\n      return this\n    }\n\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\n  , finish: function(){\n\n      this.stop(true, false)\n\n      while(this.dequeue().situation && this.stop(true, false));\n\n      this.clearQueue().clearCurrent()\n\n      return this\n    }\n\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\n  , atStart: function() {\n    return this.at(0, true)\n  }\n\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\n  , atEnd: function() {\n    if (this.situation.loops === true) {\n      // If in a infinite loop, we end the current iteration\n      return this.at(this.situation.loop+1, true)\n    } else if(typeof this.situation.loops == 'number') {\n      // If performing a finite number of loops, we go after all the loops\n      return this.at(this.situation.loops, true)\n    } else {\n      // If no loops, we just go at the end\n      return this.at(1, true)\n    }\n  }\n\n    // set the internal animation pointer to the specified position and updates the visualisation\n    // if isAbsPos is true, pos is treated as an absolute position\n  , at: function(pos, isAbsPos){\n      var durDivSpd = this.situation.duration/this._speed\n\n      this.absPos = pos\n      // If pos is not an absolute position, we convert it into one\n      if (!isAbsPos) {\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\n        this.absPos += this.situation.loop\n      }\n\n      this.situation.start = +new Date - this.absPos * durDivSpd\n      this.situation.finish = this.situation.start + durDivSpd\n\n      return this.step(true)\n    }\n\n    /**\n     * sets or returns the speed of the animations\n     * @param speed null || Number The new speed of the animations\n     * @return Number || this\n     */\n  , speed: function(speed){\n      if (speed === 0) return this.pause()\n\n      if (speed) {\n        this._speed = speed\n        // We use an absolute position here so that speed can affect the delay before the animation\n        return this.at(this.absPos, true)\n      } else return this._speed\n    }\n\n    // Make loopable\n  , loop: function(times, reverse) {\n      var c = this.last()\n\n      // store total loops\n      c.loops = (times != null) ? times : true\n      c.loop = 0\n\n      if(reverse) c.reversing = true\n      return this\n    }\n\n    // pauses the animation\n  , pause: function(){\n      this.paused = true\n      this.stopAnimFrame()\n\n      return this\n    }\n\n    // unpause the animation\n  , play: function(){\n      if(!this.paused) return this\n      this.paused = false\n      // We use an absolute position here so that the delay before the animation can be paused\n      return this.at(this.absPos, true)\n    }\n\n    /**\n     * toggle or set the direction of the animation\n     * true sets direction to backwards while false sets it to forwards\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\n     * @return this\n     */\n  , reverse: function(reversed){\n      var c = this.last()\n\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\n      else c.reversed = reversed\n\n      return this\n    }\n\n\n    /**\n     * returns a float from 0-1 indicating the progress of the current animation\n     * @param eased Boolean indicating whether the returned position should be eased or not\n     * @return number\n     */\n  , progress: function(easeIt){\n      return easeIt ? this.situation.ease(this.pos) : this.pos\n    }\n\n    /**\n     * adds a callback function which is called when the current animation is finished\n     * @param fn Function which should be executed as callback\n     * @return number\n     */\n  , after: function(fn){\n      var c = this.last()\n        , wrapper = function wrapper(e){\n            if(e.detail.situation == c){\n              fn.call(this, c)\n              this.off('finished.fx', wrapper) // prevent memory leak\n            }\n          }\n\n      this.target().on('finished.fx', wrapper)\n      return this\n    }\n\n    // adds a callback which is called whenever one animation step is performed\n  , during: function(fn){\n      var c = this.last()\n        , wrapper = function(e){\n            if(e.detail.situation == c){\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\n            }\n          }\n\n      // see above\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\n\n      return this.after(function(){\n        this.off('during.fx', wrapper)\n      })\n    }\n\n    // calls after ALL animations in the queue are finished\n  , afterAll: function(fn){\n      var wrapper = function wrapper(e){\n            fn.call(this)\n            this.off('allfinished.fx', wrapper)\n          }\n\n      // see above\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\n      return this\n    }\n\n    // calls on every animation step for all animations\n  , duringAll: function(fn){\n      var wrapper = function(e){\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\n          }\n\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\n\n      return this.afterAll(function(){\n        this.off('during.fx', wrapper)\n      })\n    }\n\n  , last: function(){\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\n    }\n\n    // adds one property to the animations\n  , add: function(method, args, type){\n      this.last()[type || 'animations'][method] = args\n      setTimeout(function(){this.start()}.bind(this), 0)\n      return this\n    }\n\n    /** perform one step of the animation\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\n     *  @return this\n     */\n  , step: function(ignoreTime){\n\n      // convert current time to an absolute position\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\n\n      // This part convert an absolute position to a position\n      if(this.situation.loops !== false) {\n        var absPos, absPosInt, lastLoop\n\n        // If the absolute position is below 0, we just treat it as if it was 0\n        absPos = Math.max(this.absPos, 0)\n        absPosInt = Math.floor(absPos)\n\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\n          this.pos = absPos - absPosInt\n          lastLoop = this.situation.loop\n          this.situation.loop = absPosInt\n        } else {\n          this.absPos = this.situation.loops\n          this.pos = 1\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\n          lastLoop = this.situation.loop - 1\n          this.situation.loop = this.situation.loops\n        }\n\n        if(this.situation.reversing) {\n          // Toggle reversed if an odd number of loops as occured since the last call of step\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\n        }\n\n      } else {\n        // If there are no loop, the absolute position must not be above 1\n        this.absPos = Math.min(this.absPos, 1)\n        this.pos = this.absPos\n      }\n\n      // while the absolute position can be below 0, the position must not be below 0\n      if(this.pos < 0) this.pos = 0\n\n      if(this.situation.reversed) this.pos = 1 - this.pos\n\n\n      // apply easing\n      var eased = this.situation.ease(this.pos)\n\n      // call once-callbacks\n      for(var i in this.situation.once){\n        if(i > this.lastPos && i <= eased){\n          this.situation.once[i].call(this.target(), this.pos, eased)\n          delete this.situation.once[i]\n        }\n      }\n\n      // fire during callback with position, eased position and current situation as parameter\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\n\n      // the user may call stop or finish in the during callback\n      // so make sure that we still have a valid situation\n      if(!this.situation){\n        return this\n      }\n\n      // apply the actual animation to every property\n      this.eachAt()\n\n      // do final code when situation is finished\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\n\n        // stop animation callback\n        this.stopAnimFrame()\n\n        // fire finished callback with current situation as parameter\n        this.target().fire('finished', {fx:this, situation: this.situation})\n\n        if(!this.situations.length){\n          this.target().fire('allfinished')\n          this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\n          this.active = false\n        }\n\n        // start next animation\n        if(this.active) this.dequeue()\n        else this.clearCurrent()\n\n      }else if(!this.paused && this.active){\n        // we continue animating when we are not at the end\n        this.startAnimFrame()\n      }\n\n      // save last eased position for once callback triggering\n      this.lastPos = eased\n      return this\n\n    }\n\n    // calculates the step for every property and calls block with it\n  , eachAt: function(){\n      var i, at, self = this, target = this.target(), s = this.situation\n\n      // apply animations which can be called trough a method\n      for(i in s.animations){\n\n        at = [].concat(s.animations[i]).map(function(el){\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\n        })\n\n        target[i].apply(target, at)\n\n      }\n\n      // apply animation which has to be applied with attr()\n      for(i in s.attrs){\n\n        at = [i].concat(s.attrs[i]).map(function(el){\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\n        })\n\n        target.attr.apply(target, at)\n\n      }\n\n      // apply animation which has to be applied with style()\n      for(i in s.styles){\n\n        at = [i].concat(s.styles[i]).map(function(el){\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\n        })\n\n        target.style.apply(target, at)\n\n      }\n\n      // animate initialTransformation which has to be chained\n      if(s.transforms.length){\n\n        // get initial initialTransformation\n        at = s.initialTransformation\n        for(i = 0, len = s.transforms.length; i < len; i++){\n\n          // get next transformation in chain\n          var a = s.transforms[i]\n\n          // multiply matrix directly\n          if(a instanceof SVG.Matrix){\n\n            if(a.relative){\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\n            }else{\n              at = at.morph(a).at(s.ease(this.pos))\n            }\n            continue\n          }\n\n          // when transformation is absolute we have to reset the needed transformation first\n          if(!a.relative)\n            a.undo(at.extract())\n\n          // and reapply it after\n          at = at.multiply(a.at(s.ease(this.pos)))\n\n        }\n\n        // set new matrix on element\n        target.matrix(at)\n      }\n\n      return this\n\n    }\n\n\n    // adds an once-callback which is called at a specific position and never again\n  , once: function(pos, fn, isEased){\n\n      if(!isEased)pos = this.situation.ease(pos)\n\n      this.situation.once[pos] = fn\n\n      return this\n    }\n\n  }\n\n, parent: SVG.Element\n\n  // Add method to parent elements\n, construct: {\n    // Get fx module or create a new one, then animate with given duration and ease\n    animate: function(o, ease, delay) {\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\n    }\n  , delay: function(delay){\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\n    }\n  , stop: function(jumpToEnd, clearQueue) {\n      if (this.fx)\n        this.fx.stop(jumpToEnd, clearQueue)\n\n      return this\n    }\n  , finish: function() {\n      if (this.fx)\n        this.fx.finish()\n\n      return this\n    }\n    // Pause current animation\n  , pause: function() {\n      if (this.fx)\n        this.fx.pause()\n\n      return this\n    }\n    // Play paused current animation\n  , play: function() {\n      if (this.fx)\n        this.fx.play()\n\n      return this\n    }\n    // Set/Get the speed of the animations\n  , speed: function(speed) {\n      if (this.fx)\n        if (speed == null)\n          return this.fx.speed()\n        else\n          this.fx.speed(speed)\n\n      return this\n    }\n  }\n\n})\n\n// MorphObj is used whenever no morphable object is given\nSVG.MorphObj = SVG.invent({\n\n  create: function(from, to){\n    // prepare color for morphing\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\n    // prepare number for morphing\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\n\n    // prepare for plain morphing\n    this.value = 0\n    this.destination = to\n  }\n\n, extend: {\n    at: function(pos, real){\n      return real < 1 ? this.value : this.destination\n    },\n\n    valueOf: function(){\n      return this.value\n    }\n  }\n\n})\n\nSVG.extend(SVG.FX, {\n  // Add animatable attributes\n  attr: function(a, v, relative) {\n    // apply attributes individually\n    if (typeof a == 'object') {\n      for (var key in a)\n        this.attr(key, a[key])\n\n    } else {\n      // the MorphObj takes care about the right function used\n      this.add(a, new SVG.MorphObj(null, v), 'attrs')\n    }\n\n    return this\n  }\n  // Add animatable styles\n, style: function(s, v) {\n    if (typeof s == 'object')\n      for (var key in s)\n        this.style(key, s[key])\n\n    else\n      this.add(s, new SVG.MorphObj(null, v), 'styles')\n\n    return this\n  }\n  // Animatable x-axis\n, x: function(x, relative) {\n    if(this.target() instanceof SVG.G){\n      this.transform({x:x}, relative)\n      return this\n    }\n\n    var num = new SVG.Number().morph(x)\n    num.relative = relative\n    return this.add('x', num)\n  }\n  // Animatable y-axis\n, y: function(y, relative) {\n    if(this.target() instanceof SVG.G){\n      this.transform({y:y}, relative)\n      return this\n    }\n\n    var num = new SVG.Number().morph(y)\n    num.relative = relative\n    return this.add('y', num)\n  }\n  // Animatable center x-axis\n, cx: function(x) {\n    return this.add('cx', new SVG.Number().morph(x))\n  }\n  // Animatable center y-axis\n, cy: function(y) {\n    return this.add('cy', new SVG.Number().morph(y))\n  }\n  // Add animatable move\n, move: function(x, y) {\n    return this.x(x).y(y)\n  }\n  // Add animatable center\n, center: function(x, y) {\n    return this.cx(x).cy(y)\n  }\n  // Add animatable size\n, size: function(width, height) {\n    if (this.target() instanceof SVG.Text) {\n      // animate font size for Text elements\n      this.attr('font-size', width)\n\n    } else {\n      // animate bbox based size for all other elements\n      var box\n\n      if(!width || !height){\n        box = this.target().bbox()\n      }\n\n      if(!width){\n        width = box.width / box.height  * height\n      }\n\n      if(!height){\n        height = box.height / box.width  * width\n      }\n\n      this.add('width' , new SVG.Number().morph(width))\n          .add('height', new SVG.Number().morph(height))\n\n    }\n\n    return this\n  }\n  // Add animatable plot\n, plot: function(p) {\n    return this.add('plot', this.target().array().morph(p))\n  }\n  // Add leading method\n, leading: function(value) {\n    return this.target().leading ?\n      this.add('leading', new SVG.Number().morph(value)) :\n      this\n  }\n  // Add animatable viewbox\n, viewbox: function(x, y, width, height) {\n    if (this.target() instanceof SVG.Container) {\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\n    }\n\n    return this\n  }\n, update: function(o) {\n    if (this.target() instanceof SVG.Stop) {\n      if (typeof o == 'number' || o instanceof SVG.Number) {\n        return this.update({\n          offset:  arguments[0]\n        , color:   arguments[1]\n        , opacity: arguments[2]\n        })\n      }\n\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n      if (o.color   != null) this.attr('stop-color', o.color)\n      if (o.offset  != null) this.attr('offset', o.offset)\n    }\n\n    return this\n  }\n})\n\nSVG.BBox = SVG.invent({\n  // Initialize\n  create: function(element) {\n    // get values if element is given\n    if (element) {\n      var box\n\n      // yes this is ugly, but Firefox can be a bitch when it comes to elements that are not yet rendered\n      try {\n\n        // the element is NOT in the dom, throw error\n        if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\n\n        // find native bbox\n        box = element.node.getBBox()\n      } catch(e) {\n        if(element instanceof SVG.Shape){\n          var clone = element.clone(SVG.parser.draw).show()\n          box = clone.bbox()\n          clone.remove()\n        }else{\n          box = {\n            x:      element.node.clientLeft\n          , y:      element.node.clientTop\n          , width:  element.node.clientWidth\n          , height: element.node.clientHeight\n          }\n        }\n      }\n\n      // plain x and y\n      this.x = box.x\n      this.y = box.y\n\n      // plain width and height\n      this.width  = box.width\n      this.height = box.height\n    }\n\n    // add center, right and bottom\n    fullBox(this)\n  }\n\n  // Define Parent\n, parent: SVG.Element\n\n  // Constructor\n, construct: {\n    // Get bounding box\n    bbox: function() {\n      return new SVG.BBox(this)\n    }\n  }\n\n})\n\nSVG.TBox = SVG.invent({\n  // Initialize\n  create: function(element) {\n    // get values if element is given\n    if (element) {\n      var t   = element.ctm().extract()\n        , box = element.bbox()\n\n      // width and height including transformations\n      this.width  = box.width  * t.scaleX\n      this.height = box.height * t.scaleY\n\n      // x and y including transformations\n      this.x = box.x + t.x\n      this.y = box.y + t.y\n    }\n\n    // add center, right and bottom\n    fullBox(this)\n  }\n\n  // Define Parent\n, parent: SVG.Element\n\n  // Constructor\n, construct: {\n    // Get transformed bounding box\n    tbox: function() {\n      return new SVG.TBox(this)\n    }\n  }\n\n})\n\n\nSVG.RBox = SVG.invent({\n  // Initialize\n  create: function(element) {\n    if (element) {\n      var e    = element.doc().parent()\n        , box  = element.node.getBoundingClientRect()\n        , zoom = 1\n\n      // get screen offset\n      this.x = box.left\n      this.y = box.top\n\n      // subtract parent offset\n      this.x -= e.offsetLeft\n      this.y -= e.offsetTop\n\n      while (e = e.offsetParent) {\n        this.x -= e.offsetLeft\n        this.y -= e.offsetTop\n      }\n\n      // calculate cumulative zoom from svg documents\n      e = element\n      while (e.parent && (e = e.parent())) {\n        if (e.viewbox) {\n          zoom *= e.viewbox().zoom\n          this.x -= e.x() || 0\n          this.y -= e.y() || 0\n        }\n      }\n\n      // recalculate viewbox distortion\n      this.width  = box.width  /= zoom\n      this.height = box.height /= zoom\n    }\n\n    // add center, right and bottom\n    fullBox(this)\n\n    // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n    this.x += window.pageXOffset\n    this.y += window.pageYOffset\n  }\n\n  // define Parent\n, parent: SVG.Element\n\n  // Constructor\n, construct: {\n    // Get rect box\n    rbox: function() {\n      return new SVG.RBox(this)\n    }\n  }\n\n})\n\n// Add universal merge method\n;[SVG.BBox, SVG.TBox, SVG.RBox].forEach(function(c) {\n\n  SVG.extend(c, {\n    // Merge rect box with another, return a new instance\n    merge: function(box) {\n      var b = new c()\n\n      // merge boxes\n      b.x      = Math.min(this.x, box.x)\n      b.y      = Math.min(this.y, box.y)\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\n\n      return fullBox(b)\n    }\n\n  })\n\n})\n\nSVG.Matrix = SVG.invent({\n  // Initialize\n  create: function(source) {\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\n\n    // ensure source as object\n    source = source instanceof SVG.Element ?\n      source.matrixify() :\n    typeof source === 'string' ?\n      stringToMatrix(source) :\n    arguments.length == 6 ?\n      arrayToMatrix([].slice.call(arguments)) :\n    typeof source === 'object' ?\n      source : base\n\n    // merge source\n    for (i = abcdef.length - 1; i >= 0; --i)\n      this[abcdef[i]] = source && typeof source[abcdef[i]] === 'number' ?\n        source[abcdef[i]] : base[abcdef[i]]\n  }\n\n  // Add methods\n, extend: {\n    // Extract individual transformations\n    extract: function() {\n      // find delta transform points\n      var px    = deltaTransformPoint(this, 0, 1)\n        , py    = deltaTransformPoint(this, 1, 0)\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\n\n      return {\n        // translation\n        x:        this.e\n      , y:        this.f\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\n        // skew\n      , skewX:    -skewX\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\n        // scale\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\n        // rotation\n      , rotation: skewX\n      , a: this.a\n      , b: this.b\n      , c: this.c\n      , d: this.d\n      , e: this.e\n      , f: this.f\n      , matrix: new SVG.Matrix(this)\n      }\n    }\n    // Clone matrix\n  , clone: function() {\n      return new SVG.Matrix(this)\n    }\n    // Morph one matrix into another\n  , morph: function(matrix) {\n      // store new destination\n      this.destination = new SVG.Matrix(matrix)\n\n      return this\n    }\n    // Get morphed matrix at a given position\n  , at: function(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this\n\n      // calculate morphed matrix at a given position\n      var matrix = new SVG.Matrix({\n        a: this.a + (this.destination.a - this.a) * pos\n      , b: this.b + (this.destination.b - this.b) * pos\n      , c: this.c + (this.destination.c - this.c) * pos\n      , d: this.d + (this.destination.d - this.d) * pos\n      , e: this.e + (this.destination.e - this.e) * pos\n      , f: this.f + (this.destination.f - this.f) * pos\n      })\n\n      // process parametric rotation if present\n      if (this.param && this.param.to) {\n        // calculate current parametric position\n        var param = {\n          rotation: this.param.from.rotation + (this.param.to.rotation - this.param.from.rotation) * pos\n        , cx:       this.param.from.cx\n        , cy:       this.param.from.cy\n        }\n\n        // rotate matrix\n        matrix = matrix.rotate(\n          (this.param.to.rotation - this.param.from.rotation * 2) * pos\n        , param.cx\n        , param.cy\n        )\n\n        // store current parametric values\n        matrix.param = param\n      }\n\n      return matrix\n    }\n    // Multiplies by given matrix\n  , multiply: function(matrix) {\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\n    }\n    // Inverses matrix\n  , inverse: function() {\n      return new SVG.Matrix(this.native().inverse())\n    }\n    // Translate matrix\n  , translate: function(x, y) {\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\n    }\n    // Scale matrix\n  , scale: function(x, y, cx, cy) {\n      // support uniformal scale\n      if (arguments.length == 1) {\n        y = x\n      } else if (arguments.length == 3) {\n        cy = cx\n        cx = y\n        y = x\n      }\n\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\n    }\n    // Rotate matrix\n  , rotate: function(r, cx, cy) {\n      // convert degrees to radians\n      r = SVG.utils.radians(r)\n\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\n    }\n    // Flip matrix on x or y, at a given offset\n  , flip: function(a, o) {\n      return a == 'x' ? this.scale(-1, 1, o, 0) : this.scale(1, -1, 0, o)\n    }\n    // Skew\n  , skew: function(x, y, cx, cy) {\n      // support uniformal skew\n      if (arguments.length == 1) {\n        y = x\n      } else if (arguments.length == 3) {\n        cy = cx\n        cx = y\n        y = x\n      }\n\n      // convert degrees to radians\n      x = SVG.utils.radians(x)\n      y = SVG.utils.radians(y)\n\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\n    }\n    // SkewX\n  , skewX: function(x, cx, cy) {\n      return this.skew(x, 0, cx, cy)\n    }\n    // SkewY\n  , skewY: function(y, cx, cy) {\n      return this.skew(0, y, cx, cy)\n    }\n    // Transform around a center point\n  , around: function(cx, cy, matrix) {\n      return this\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\n        .multiply(matrix)\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\n    }\n    // Convert to native SVGMatrix\n  , native: function() {\n      // create new matrix\n      var matrix = SVG.parser.native.createSVGMatrix()\n\n      // update with current values\n      for (var i = abcdef.length - 1; i >= 0; i--)\n        matrix[abcdef[i]] = this[abcdef[i]]\n\n      return matrix\n    }\n    // Convert matrix to string\n  , toString: function() {\n      return 'matrix(' + this.a + ',' + this.b + ',' + this.c + ',' + this.d + ',' + this.e + ',' + this.f + ')'\n    }\n  }\n\n  // Define parent\n, parent: SVG.Element\n\n  // Add parent method\n, construct: {\n    // Get current matrix\n    ctm: function() {\n      return new SVG.Matrix(this.node.getCTM())\n    },\n    // Get current screen matrix\n    screenCTM: function() {\n      return new SVG.Matrix(this.node.getScreenCTM())\n    }\n\n  }\n\n})\n\nSVG.Point = SVG.invent({\n  // Initialize\n  create: function(x,y) {\n    var i, source, base = {x:0, y:0}\n\n    // ensure source as object\n    source = Array.isArray(x) ?\n      {x:x[0], y:x[1]} :\n    typeof x === 'object' ?\n      {x:x.x, y:x.y} :\n    x != null ?\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\n\n    // merge source\n    this.x = source.x\n    this.y = source.y\n  }\n\n  // Add methods\n, extend: {\n    // Clone point\n    clone: function() {\n      return new SVG.Point(this)\n    }\n    // Morph one point into another\n  , morph: function(x, y) {\n      // store new destination\n      this.destination = new SVG.Point(x, y)\n\n      return this\n    }\n    // Get morphed point at a given position\n  , at: function(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this\n\n      // calculate morphed matrix at a given position\n      var point = new SVG.Point({\n        x: this.x + (this.destination.x - this.x) * pos\n      , y: this.y + (this.destination.y - this.y) * pos\n      })\n\n      return point\n    }\n    // Convert to native SVGPoint\n  , native: function() {\n      // create new point\n      var point = SVG.parser.native.createSVGPoint()\n\n      // update with current values\n      point.x = this.x\n      point.y = this.y\n\n      return point\n    }\n    // transform point with matrix\n  , transform: function(matrix) {\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\n    }\n\n  }\n\n})\n\nSVG.extend(SVG.Element, {\n\n  // Get point\n  point: function(x, y) {\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\n  }\n\n})\n\nSVG.extend(SVG.Element, {\n  // Set svg element attribute\n  attr: function(a, v, n) {\n    // act as full getter\n    if (a == null) {\n      // get an object of attributes\n      a = {}\n      v = this.node.attributes\n      for (n = v.length - 1; n >= 0; n--)\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\n\n      return a\n\n    } else if (typeof a == 'object') {\n      // apply every attribute individually if an object is passed\n      for (v in a) this.attr(v, a[v])\n\n    } else if (v === null) {\n        // remove value\n        this.node.removeAttribute(a)\n\n    } else if (v == null) {\n      // act as a getter if the first and only argument is not an object\n      v = this.node.getAttribute(a)\n      return v == null ?\n        SVG.defaults.attrs[a] :\n      SVG.regex.isNumber.test(v) ?\n        parseFloat(v) : v\n\n    } else {\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\n      if (a == 'stroke-width')\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\n      else if (a == 'stroke')\n        this._stroke = v\n\n      // convert image fill and stroke to patterns\n      if (a == 'fill' || a == 'stroke') {\n        if (SVG.regex.isImage.test(v))\n          v = this.doc().defs().image(v, 0, 0)\n\n        if (v instanceof SVG.Image)\n          v = this.doc().defs().pattern(0, 0, function() {\n            this.add(v)\n          })\n      }\n\n      // ensure correct numeric values (also accepts NaN and Infinity)\n      if (typeof v === 'number')\n        v = new SVG.Number(v)\n\n      // ensure full hex color\n      else if (SVG.Color.isColor(v))\n        v = new SVG.Color(v)\n\n      // parse array values\n      else if (Array.isArray(v))\n        v = new SVG.Array(v)\n\n      // store parametric transformation values locally\n      else if (v instanceof SVG.Matrix && v.param)\n        this.param = v.param\n\n      // if the passed attribute is leading...\n      if (a == 'leading') {\n        // ... call the leading method instead\n        if (this.leading)\n          this.leading(v)\n      } else {\n        // set given attribute on node\n        typeof n === 'string' ?\n          this.node.setAttributeNS(n, a, v.toString()) :\n          this.node.setAttribute(a, v.toString())\n      }\n\n      // rebuild if required\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\n        this.rebuild(a, v)\n    }\n\n    return this\n  }\n})\nSVG.extend(SVG.Element, {\n  // Add transformations\n  transform: function(o, relative) {\n    // get target in case of the fx module, otherwise reference this\n    var target = this\n      , matrix\n\n    // act as a getter\n    if (typeof o !== 'object') {\n      // get current matrix\n      matrix = new SVG.Matrix(target).extract()\n\n      return typeof o === 'string' ? matrix[o] : matrix\n    }\n\n    // get current matrix\n    matrix = new SVG.Matrix(target)\n\n    // ensure relative flag\n    relative = !!relative || !!o.relative\n\n    // act on matrix\n    if (o.a != null) {\n      matrix = relative ?\n        // relative\n        matrix.multiply(new SVG.Matrix(o)) :\n        // absolute\n        new SVG.Matrix(o)\n\n    // act on rotation\n    } else if (o.rotation != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // apply transformation\n      matrix = relative ?\n        // relative\n        matrix.rotate(o.rotation, o.cx, o.cy) :\n        // absolute\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\n\n    // act on scale\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // ensure scale values on both axes\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\n\n      if (!relative) {\n        // absolute; multiply inversed values\n        var e = matrix.extract()\n        o.scaleX = o.scaleX * 1 / e.scaleX\n        o.scaleY = o.scaleY * 1 / e.scaleY\n      }\n\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\n\n    // act on skew\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // ensure skew values on both axes\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\n\n      if (!relative) {\n        // absolute; reset skew values\n        var e = matrix.extract()\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\n      }\n\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\n\n    // act on flip\n    } else if (o.flip) {\n      matrix = matrix.flip(\n        o.flip\n      , o.offset == null ? target.bbox()['c' + o.flip] : o.offset\n      )\n\n    // act on translate\n    } else if (o.x != null || o.y != null) {\n      if (relative) {\n        // relative\n        matrix = matrix.translate(o.x, o.y)\n      } else {\n        // absolute\n        if (o.x != null) matrix.e = o.x\n        if (o.y != null) matrix.f = o.y\n      }\n    }\n\n    return this.attr('transform', matrix)\n  }\n})\n\nSVG.extend(SVG.FX, {\n  transform: function(o, relative) {\n    // get target in case of the fx module, otherwise reference this\n    var target = this.target()\n      , matrix\n\n    // act as a getter\n    if (typeof o !== 'object') {\n      // get current matrix\n      matrix = new SVG.Matrix(target).extract()\n\n      return typeof o === 'string' ? matrix[o] : matrix\n    }\n\n    // ensure relative flag\n    relative = !!relative || !!o.relative\n\n    // act on matrix\n    if (o.a != null) {\n      matrix = new SVG.Matrix(o)\n\n    // act on rotation\n    } else if (o.rotation != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // apply transformation\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\n\n    // act on scale\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // ensure scale values on both axes\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\n\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\n\n    // act on skew\n    } else if (o.skewX != null || o.skewY != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // ensure skew values on both axes\n      o.skewX = o.skewX != null ? o.skewX : 0\n      o.skewY = o.skewY != null ? o.skewY : 0\n\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\n\n    // act on flip\n    } else if (o.flip) {\n      matrix = new SVG.Matrix().morph(new SVG.Matrix().flip(\n        o.flip\n      , o.offset == null ? target.bbox()['c' + o.flip] : o.offset\n      ))\n\n    // act on translate\n    } else if (o.x != null || o.y != null) {\n      matrix = new SVG.Translate(o.x, o.y)\n    }\n\n    if(!matrix) return this\n\n    matrix.relative = relative\n\n    this.last().transforms.push(matrix)\n\n    setTimeout(function(){this.start()}.bind(this), 0)\n\n    return this\n  }\n})\n\nSVG.extend(SVG.Element, {\n  // Reset all transformations\n  untransform: function() {\n    return this.attr('transform', null)\n  },\n  // merge the whole transformation chain into one matrix and returns it\n  matrixify: function() {\n\n    var matrix = (this.attr('transform') || '')\n      // split transformations\n      .split(/\\)\\s*,?\\s*/).slice(0,-1).map(function(str){\n        // generate key => value pairs\n        var kv = str.trim().split('(')\n        return [kv[0], kv[1].split(SVG.regex.matrixElements).map(function(str){ return parseFloat(str) })]\n      })\n      // calculate every transformation into one matrix\n      .reduce(function(matrix, transform){\n\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\n        return matrix[transform[0]].apply(matrix, transform[1])\n\n      }, new SVG.Matrix())\n\n    return matrix\n  },\n  // add an element to another parent without changing the visual representation on the screen\n  toParent: function(parent) {\n    if(this == parent) return this\n    var ctm = this.screenCTM()\n    var temp = parent.rect(1,1)\n    var pCtm = temp.screenCTM().inverse()\n    temp.remove()\n\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\n\n    return this\n  },\n  // same as above with parent equals root-svg\n  toDoc: function() {\n    return this.toParent(this.doc())\n  }\n\n})\n\nSVG.Transformation = SVG.invent({\n\n  create: function(source, inversed){\n\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\n      return this.create([].slice.call(arguments))\n    }\n\n    if(typeof source == 'object'){\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\n        this[this.arguments[i]] = source[this.arguments[i]]\n      }\n    }\n\n    if(Array.isArray(source)){\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\n        this[this.arguments[i]] = source[i]\n      }\n    }\n\n    this.inversed = false\n\n    if(inversed === true){\n      this.inversed = true\n    }\n\n  }\n\n, extend: {\n\n    at: function(pos){\n\n      var params = []\n\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\n        params.push(this[this.arguments[i]])\n      }\n\n      var m = this._undo || new SVG.Matrix()\n\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\n\n      return this.inversed ? m.inverse() : m\n\n    }\n\n  , undo: function(o){\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\n      }\n\n      // The method SVG.Matrix.extract which was used before calling this\n      // method to obtain a value for the parameter o doesn't return a cx and\n      // a cy so we use the ones that were provided to this object at its creation\n      o.cx = this.cx\n      o.cy = this.cy\n\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\n\n      return this\n    }\n\n  }\n\n})\n\nSVG.Translate = SVG.invent({\n\n  parent: SVG.Matrix\n, inherit: SVG.Transformation\n\n, create: function(source, inversed){\n    if(typeof source == 'object') this.constructor.call(this, source, inversed)\n    else this.constructor.call(this, [].slice.call(arguments))\n  }\n\n, extend: {\n    arguments: ['transformedX', 'transformedY']\n  , method: 'translate'\n  }\n\n})\n\nSVG.Rotate = SVG.invent({\n\n  parent: SVG.Matrix\n, inherit: SVG.Transformation\n\n, create: function(source, inversed){\n    if(typeof source == 'object') this.constructor.call(this, source, inversed)\n    else this.constructor.call(this, [].slice.call(arguments))\n  }\n\n, extend: {\n    arguments: ['rotation', 'cx', 'cy']\n  , method: 'rotate'\n  , at: function(pos){\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\n      return this.inversed ? m.inverse() : m\n    }\n  , undo: function(o){\n      this._undo = o\n    }\n  }\n\n})\n\nSVG.Scale = SVG.invent({\n\n  parent: SVG.Matrix\n, inherit: SVG.Transformation\n\n, create: function(source, inversed){\n    if(typeof source == 'object') this.constructor.call(this, source, inversed)\n    else this.constructor.call(this, [].slice.call(arguments))\n  }\n\n, extend: {\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\n  , method: 'scale'\n  }\n\n})\n\nSVG.Skew = SVG.invent({\n\n  parent: SVG.Matrix\n, inherit: SVG.Transformation\n\n, create: function(source, inversed){\n    if(typeof source == 'object') this.constructor.call(this, source, inversed)\n    else this.constructor.call(this, [].slice.call(arguments))\n  }\n\n, extend: {\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\n  , method: 'skew'\n  }\n\n})\n\nSVG.extend(SVG.Element, {\n  // Dynamic style generator\n  style: function(s, v) {\n    if (arguments.length == 0) {\n      // get full style\n      return this.node.style.cssText || ''\n\n    } else if (arguments.length < 2) {\n      // apply every style individually if an object is passed\n      if (typeof s == 'object') {\n        for (v in s) this.style(v, s[v])\n\n      } else if (SVG.regex.isCss.test(s)) {\n        // parse css string\n        s = s.split(';')\n\n        // apply every definition individually\n        for (var i = 0; i < s.length; i++) {\n          v = s[i].split(':')\n          this.style(v[0].replace(/\\s+/g, ''), v[1])\n        }\n      } else {\n        // act as a getter if the first and only argument is not an object\n        return this.node.style[camelCase(s)]\n      }\n\n    } else {\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\n    }\n\n    return this\n  }\n})\nSVG.Parent = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    this.constructor.call(this, element)\n  }\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Add class methods\n, extend: {\n    // Returns all child elements\n    children: function() {\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\n        return SVG.adopt(node)\n      })\n    }\n    // Add given element at a position\n  , add: function(element, i) {\n      if (i == null)\n        this.node.appendChild(element.node)\n      else if (element.node != this.node.childNodes[i])\n        this.node.insertBefore(element.node, this.node.childNodes[i])\n\n      return this\n    }\n    // Basically does the same as `add()` but returns the added element instead\n  , put: function(element, i) {\n      this.add(element, i)\n      return element\n    }\n    // Checks if the given element is a child\n  , has: function(element) {\n      return this.index(element) >= 0\n    }\n    // Gets index of given element\n  , index: function(element) {\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\n    }\n    // Get a element at the given index\n  , get: function(i) {\n      return SVG.adopt(this.node.childNodes[i])\n    }\n    // Get first child\n  , first: function() {\n      return this.get(0)\n    }\n    // Get the last child\n  , last: function() {\n      return this.get(this.node.childNodes.length - 1)\n    }\n    // Iterates over all children and invokes a given block\n  , each: function(block, deep) {\n      var i, il\n        , children = this.children()\n\n      for (i = 0, il = children.length; i < il; i++) {\n        if (children[i] instanceof SVG.Element)\n          block.apply(children[i], [i, children])\n\n        if (deep && (children[i] instanceof SVG.Container))\n          children[i].each(block, deep)\n      }\n\n      return this\n    }\n    // Remove a given child\n  , removeElement: function(element) {\n      this.node.removeChild(element.node)\n\n      return this\n    }\n    // Remove all elements in this container\n  , clear: function() {\n      // remove children\n      while(this.node.hasChildNodes())\n        this.node.removeChild(this.node.lastChild)\n\n      // remove defs reference\n      delete this._defs\n\n      return this\n    }\n  , // Get defs\n    defs: function() {\n      return this.doc().defs()\n    }\n  }\n\n})\n\nSVG.extend(SVG.Parent, {\n\n  ungroup: function(parent, depth) {\n    if(depth === 0 || this instanceof SVG.Defs) return this\n\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\n    depth = depth || Infinity\n\n    this.each(function(){\n      if(this instanceof SVG.Defs) return this\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\n      return this.toParent(parent)\n    })\n\n    this.node.firstChild || this.remove()\n\n    return this\n  },\n\n  flatten: function(parent, depth) {\n    return this.ungroup(parent, depth)\n  }\n\n})\nSVG.Container = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    this.constructor.call(this, element)\n  }\n\n  // Inherit from\n, inherit: SVG.Parent\n\n})\n\nSVG.ViewBox = SVG.invent({\n\n  create: function(source) {\n    var i, base = [0, 0, 0, 0]\n\n    var x, y, width, height, box, view, we, he\n      , wm   = 1 // width multiplier\n      , hm   = 1 // height multiplier\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\n\n    if(source instanceof SVG.Element){\n\n      we = source\n      he = source\n      view = (source.attr('viewBox') || '').match(reg)\n      box = source.bbox\n\n      // get dimensions of current node\n      width  = new SVG.Number(source.width())\n      height = new SVG.Number(source.height())\n\n      // find nearest non-percentual dimensions\n      while (width.unit == '%') {\n        wm *= width.value\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\n        we = we.parent()\n      }\n      while (height.unit == '%') {\n        hm *= height.value\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\n        he = he.parent()\n      }\n\n      // ensure defaults\n      this.x      = 0\n      this.y      = 0\n      this.width  = width  * wm\n      this.height = height * hm\n      this.zoom   = 1\n\n      if (view) {\n        // get width and height from viewbox\n        x      = parseFloat(view[0])\n        y      = parseFloat(view[1])\n        width  = parseFloat(view[2])\n        height = parseFloat(view[3])\n\n        // calculate zoom accoring to viewbox\n        this.zoom = ((this.width / this.height) > (width / height)) ?\n          this.height / height :\n          this.width  / width\n\n        // calculate real pixel dimensions on parent SVG.Doc element\n        this.x      = x\n        this.y      = y\n        this.width  = width\n        this.height = height\n\n      }\n\n    }else{\n\n      // ensure source as object\n      source = typeof source === 'string' ?\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\n      Array.isArray(source) ?\n        source :\n      typeof source == 'object' ?\n        [source.x, source.y, source.width, source.height] :\n      arguments.length == 4 ?\n        [].slice.call(arguments) :\n        base\n\n      this.x = source[0]\n      this.y = source[1]\n      this.width = source[2]\n      this.height = source[3]\n    }\n\n\n  }\n\n, extend: {\n\n    toString: function() {\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\n    }\n  , morph: function(v){\n\n      var v = arguments.length == 1 ?\n        [v.x, v.y, v.width, v.height] :\n        [].slice.call(arguments)\n\n      this.destination = new SVG.ViewBox(v)\n\n      return this\n\n    }\n\n  , at: function(pos) {\n\n    if(!this.destination) return this\n\n    return new SVG.ViewBox([\n        this.x + (this.destination.x - this.x) * pos\n      , this.y + (this.destination.y - this.y) * pos\n      , this.width + (this.destination.width - this.width) * pos\n      , this.height + (this.destination.height - this.height) * pos\n    ])\n\n    }\n\n  }\n\n  // Define parent\n, parent: SVG.Container\n\n  // Add parent method\n, construct: {\n\n    // get/set viewbox\n    viewbox: function(v) {\n      if (arguments.length == 0)\n        // act as a getter if there are no arguments\n        return new SVG.ViewBox(this)\n\n      // otherwise act as a setter\n      v = arguments.length == 1 ?\n        [v.x, v.y, v.width, v.height] :\n        [].slice.call(arguments)\n\n      return this.attr('viewBox', v)\n    }\n\n  }\n\n})\n// Add events to elements\n;[  'click'\n  , 'dblclick'\n  , 'mousedown'\n  , 'mouseup'\n  , 'mouseover'\n  , 'mouseout'\n  , 'mousemove'\n  // , 'mouseenter' -> not supported by IE\n  // , 'mouseleave' -> not supported by IE\n  , 'touchstart'\n  , 'touchmove'\n  , 'touchleave'\n  , 'touchend'\n  , 'touchcancel' ].forEach(function(event) {\n\n  // add event to SVG.Element\n  SVG.Element.prototype[event] = function(f) {\n    var self = this\n\n    // bind event to element rather than element node\n    this.node['on' + event] = typeof f == 'function' ?\n      function() { return f.apply(self, arguments) } : null\n\n    return this\n  }\n\n})\n\n// Initialize listeners stack\nSVG.listeners = []\nSVG.handlerMap = []\nSVG.listenerId = 0\n\n// Add event binder in the SVG namespace\nSVG.on = function(node, event, listener, binding) {\n  // create listener, get object-index\n  var l     = listener.bind(binding || node.instance || node)\n    , index = (SVG.handlerMap.indexOf(node) + 1 || SVG.handlerMap.push(node)) - 1\n    , ev    = event.split('.')[0]\n    , ns    = event.split('.')[1] || '*'\n\n\n  // ensure valid object\n  SVG.listeners[index]         = SVG.listeners[index]         || {}\n  SVG.listeners[index][ev]     = SVG.listeners[index][ev]     || {}\n  SVG.listeners[index][ev][ns] = SVG.listeners[index][ev][ns] || {}\n\n  if(!listener._svgjsListenerId)\n    listener._svgjsListenerId = ++SVG.listenerId\n\n  // reference listener\n  SVG.listeners[index][ev][ns][listener._svgjsListenerId] = l\n\n  // add listener\n  node.addEventListener(ev, l, false)\n}\n\n// Add event unbinder in the SVG namespace\nSVG.off = function(node, event, listener) {\n  var index = SVG.handlerMap.indexOf(node)\n    , ev    = event && event.split('.')[0]\n    , ns    = event && event.split('.')[1]\n\n  if(index == -1) return\n\n  if (listener) {\n    if(typeof listener == 'function') listener = listener._svgjsListenerId\n    if(!listener) return\n\n    // remove listener reference\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns || '*']) {\n      // remove listener\n      node.removeEventListener(ev, SVG.listeners[index][ev][ns || '*'][listener], false)\n\n      delete SVG.listeners[index][ev][ns || '*'][listener]\n    }\n\n  } else if (ns && ev) {\n    // remove all listeners for a namespaced event\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns]) {\n      for (listener in SVG.listeners[index][ev][ns])\n        SVG.off(node, [ev, ns].join('.'), listener)\n\n      delete SVG.listeners[index][ev][ns]\n    }\n\n  } else if (ns){\n    // remove all listeners for a specific namespace\n    for(event in SVG.listeners[index]){\n        for(namespace in SVG.listeners[index][event]){\n            if(ns === namespace){\n                SVG.off(node, [event, ns].join('.'))\n            }\n        }\n    }\n\n  } else if (ev) {\n    // remove all listeners for the event\n    if (SVG.listeners[index][ev]) {\n      for (namespace in SVG.listeners[index][ev])\n        SVG.off(node, [ev, namespace].join('.'))\n\n      delete SVG.listeners[index][ev]\n    }\n\n  } else {\n    // remove all listeners on a given node\n    for (event in SVG.listeners[index])\n      SVG.off(node, event)\n\n    delete SVG.listeners[index]\n\n  }\n}\n\n//\nSVG.extend(SVG.Element, {\n  // Bind given event to listener\n  on: function(event, listener, binding) {\n    SVG.on(this.node, event, listener, binding)\n\n    return this\n  }\n  // Unbind event from listener\n, off: function(event, listener) {\n    SVG.off(this.node, event, listener)\n\n    return this\n  }\n  // Fire given event\n, fire: function(event, data) {\n\n    // Dispatch event\n    if(event instanceof Event){\n        this.node.dispatchEvent(event)\n    }else{\n        this.node.dispatchEvent(new CustomEvent(event, {detail:data}))\n    }\n\n    return this\n  }\n})\n\nSVG.Defs = SVG.invent({\n  // Initialize node\n  create: 'defs'\n\n  // Inherit from\n, inherit: SVG.Container\n\n})\nSVG.G = SVG.invent({\n  // Initialize node\n  create: 'g'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Move over x-axis\n    x: function(x) {\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\n    }\n    // Move over y-axis\n  , y: function(y) {\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\n    }\n    // Move by center over x-axis\n  , cx: function(x) {\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\n    }\n    // Move by center over y-axis\n  , cy: function(y) {\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\n    }\n  , gbox: function() {\n\n      var bbox  = this.bbox()\n        , trans = this.transform()\n\n      bbox.x  += trans.x\n      bbox.x2 += trans.x\n      bbox.cx += trans.x\n\n      bbox.y  += trans.y\n      bbox.y2 += trans.y\n      bbox.cy += trans.y\n\n      return bbox\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a group element\n    group: function() {\n      return this.put(new SVG.G)\n    }\n  }\n})\n\n// ### This module adds backward / forward functionality to elements.\n\n//\nSVG.extend(SVG.Element, {\n  // Get all siblings, including myself\n  siblings: function() {\n    return this.parent().children()\n  }\n  // Get the curent position siblings\n, position: function() {\n    return this.parent().index(this)\n  }\n  // Get the next element (will return null if there is none)\n, next: function() {\n    return this.siblings()[this.position() + 1]\n  }\n  // Get the next element (will return null if there is none)\n, previous: function() {\n    return this.siblings()[this.position() - 1]\n  }\n  // Send given element one step forward\n, forward: function() {\n    var i = this.position() + 1\n      , p = this.parent()\n\n    // move node one step forward\n    p.removeElement(this).add(this, i)\n\n    // make sure defs node is always at the top\n    if (p instanceof SVG.Doc)\n      p.node.appendChild(p.defs().node)\n\n    return this\n  }\n  // Send given element one step backward\n, backward: function() {\n    var i = this.position()\n\n    if (i > 0)\n      this.parent().removeElement(this).add(this, i - 1)\n\n    return this\n  }\n  // Send given element all the way to the front\n, front: function() {\n    var p = this.parent()\n\n    // Move node forward\n    p.node.appendChild(this.node)\n\n    // Make sure defs node is always at the top\n    if (p instanceof SVG.Doc)\n      p.node.appendChild(p.defs().node)\n\n    return this\n  }\n  // Send given element all the way to the back\n, back: function() {\n    if (this.position() > 0)\n      this.parent().removeElement(this).add(this, 0)\n\n    return this\n  }\n  // Inserts a given element before the targeted element\n, before: function(element) {\n    element.remove()\n\n    var i = this.position()\n\n    this.parent().add(element, i)\n\n    return this\n  }\n  // Insters a given element after the targeted element\n, after: function(element) {\n    element.remove()\n\n    var i = this.position()\n\n    this.parent().add(element, i + 1)\n\n    return this\n  }\n\n})\nSVG.Mask = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('mask'))\n\n    // keep references to masked elements\n    this.targets = []\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Unmask all masked elements and remove itself\n    remove: function() {\n      // unmask all targets\n      for (var i = this.targets.length - 1; i >= 0; i--)\n        if (this.targets[i])\n          this.targets[i].unmask()\n      this.targets = []\n\n      // remove mask from parent\n      this.parent().removeElement(this)\n\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create masking element\n    mask: function() {\n      return this.defs().put(new SVG.Mask)\n    }\n  }\n})\n\n\nSVG.extend(SVG.Element, {\n  // Distribute mask to svg element\n  maskWith: function(element) {\n    // use given mask or create a new one\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\n\n    // store reverence on self in mask\n    this.masker.targets.push(this)\n\n    // apply mask\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\n  }\n  // Unmask element\n, unmask: function() {\n    delete this.masker\n    return this.attr('mask', null)\n  }\n\n})\n\nSVG.ClipPath = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('clipPath'))\n\n    // keep references to clipped elements\n    this.targets = []\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Unclip all clipped elements and remove itself\n    remove: function() {\n      // unclip all targets\n      for (var i = this.targets.length - 1; i >= 0; i--)\n        if (this.targets[i])\n          this.targets[i].unclip()\n      this.targets = []\n\n      // remove clipPath from parent\n      this.parent().removeElement(this)\n\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create clipping element\n    clip: function() {\n      return this.defs().put(new SVG.ClipPath)\n    }\n  }\n})\n\n//\nSVG.extend(SVG.Element, {\n  // Distribute clipPath to svg element\n  clipWith: function(element) {\n    // use given clip or create a new one\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\n\n    // store reverence on self in mask\n    this.clipper.targets.push(this)\n\n    // apply mask\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\n  }\n  // Unclip element\n, unclip: function() {\n    delete this.clipper\n    return this.attr('clip-path', null)\n  }\n\n})\nSVG.Gradient = SVG.invent({\n  // Initialize node\n  create: function(type) {\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\n\n    // store type\n    this.type = type\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Add a color stop\n    at: function(offset, color, opacity) {\n      return this.put(new SVG.Stop).update(offset, color, opacity)\n    }\n    // Update gradient\n  , update: function(block) {\n      // remove all stops\n      this.clear()\n\n      // invoke passed block\n      if (typeof block == 'function')\n        block.call(this, this)\n\n      return this\n    }\n    // Return the fill id\n  , fill: function() {\n      return 'url(#' + this.id() + ')'\n    }\n    // Alias string convertion to fill\n  , toString: function() {\n      return this.fill()\n    }\n    // custom attr to handle transform\n  , attr: function(a, b, c) {\n      if(a == 'transform') a = 'gradientTransform'\n      return SVG.Container.prototype.attr.call(this, a, b, c)\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create gradient element in defs\n    gradient: function(type, block) {\n      return this.defs().gradient(type, block)\n    }\n  }\n})\n\n// Add animatable methods to both gradient and fx module\nSVG.extend(SVG.Gradient, SVG.FX, {\n  // From position\n  from: function(x, y) {\n    return (this._target || this).type == 'radial' ?\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\n  }\n  // To position\n, to: function(x, y) {\n    return (this._target || this).type == 'radial' ?\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\n  }\n})\n\n// Base gradient generation\nSVG.extend(SVG.Defs, {\n  // define gradient\n  gradient: function(type, block) {\n    return this.put(new SVG.Gradient(type)).update(block)\n  }\n\n})\n\nSVG.Stop = SVG.invent({\n  // Initialize node\n  create: 'stop'\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Add class methods\n, extend: {\n    // add color stops\n    update: function(o) {\n      if (typeof o == 'number' || o instanceof SVG.Number) {\n        o = {\n          offset:  arguments[0]\n        , color:   arguments[1]\n        , opacity: arguments[2]\n        }\n      }\n\n      // set attributes\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n      if (o.color   != null) this.attr('stop-color', o.color)\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\n\n      return this\n    }\n  }\n\n})\n\nSVG.Pattern = SVG.invent({\n  // Initialize node\n  create: 'pattern'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Return the fill id\n    fill: function() {\n      return 'url(#' + this.id() + ')'\n    }\n    // Update pattern by rebuilding\n  , update: function(block) {\n      // remove content\n      this.clear()\n\n      // invoke passed block\n      if (typeof block == 'function')\n        block.call(this, this)\n\n      return this\n    }\n    // Alias string convertion to fill\n  , toString: function() {\n      return this.fill()\n    }\n    // custom attr to handle transform\n  , attr: function(a, b, c) {\n      if(a == 'transform') a = 'patternTransform'\n      return SVG.Container.prototype.attr.call(this, a, b, c)\n    }\n\n  }\n\n  // Add parent method\n, construct: {\n    // Create pattern element in defs\n    pattern: function(width, height, block) {\n      return this.defs().pattern(width, height, block)\n    }\n  }\n})\n\nSVG.extend(SVG.Defs, {\n  // Define gradient\n  pattern: function(width, height, block) {\n    return this.put(new SVG.Pattern).update(block).attr({\n      x:            0\n    , y:            0\n    , width:        width\n    , height:       height\n    , patternUnits: 'userSpaceOnUse'\n    })\n  }\n\n})\nSVG.Doc = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    if (element) {\n      // ensure the presence of a dom element\n      element = typeof element == 'string' ?\n        document.getElementById(element) :\n        element\n\n      // If the target is an svg element, use that element as the main wrapper.\n      // This allows svg.js to work with svg documents as well.\n      if (element.nodeName == 'svg') {\n        this.constructor.call(this, element)\n      } else {\n        this.constructor.call(this, SVG.create('svg'))\n        element.appendChild(this.node)\n        this.size('100%', '100%')\n      }\n\n      // set svg element attributes and ensure defs node\n      this.namespace().defs()\n    }\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Add namespaces\n    namespace: function() {\n      return this\n        .attr({ xmlns: SVG.ns, version: '1.1' })\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\n    }\n    // Creates and returns defs element\n  , defs: function() {\n      if (!this._defs) {\n        var defs\n\n        // Find or create a defs element in this instance\n        if (defs = this.node.getElementsByTagName('defs')[0])\n          this._defs = SVG.adopt(defs)\n        else\n          this._defs = new SVG.Defs\n\n        // Make sure the defs node is at the end of the stack\n        this.node.appendChild(this._defs.node)\n      }\n\n      return this._defs\n    }\n    // custom parent method\n  , parent: function() {\n      return this.node.parentNode.nodeName == '#document' ? null : this.node.parentNode\n    }\n    // Fix for possible sub-pixel offset. See:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\n  , spof: function(spof) {\n      var pos = this.node.getScreenCTM()\n\n      if (pos)\n        this\n          .style('left', (-pos.e % 1) + 'px')\n          .style('top',  (-pos.f % 1) + 'px')\n\n      return this\n    }\n\n      // Removes the doc from the DOM\n  , remove: function() {\n      if(this.parent()) {\n        this.parent().removeChild(this.node);\n      }\n\n      return this;\n    }\n  }\n\n})\n\nSVG.Shape = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    this.constructor.call(this, element)\n  }\n\n  // Inherit from\n, inherit: SVG.Element\n\n})\n\nSVG.Bare = SVG.invent({\n  // Initialize\n  create: function(element, inherit) {\n    // construct element\n    this.constructor.call(this, SVG.create(element))\n\n    // inherit custom methods\n    if (inherit)\n      for (var method in inherit.prototype)\n        if (typeof inherit.prototype[method] === 'function')\n          this[method] = inherit.prototype[method]\n  }\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Add methods\n, extend: {\n    // Insert some plain text\n    words: function(text) {\n      // remove contents\n      while (this.node.hasChildNodes())\n        this.node.removeChild(this.node.lastChild)\n\n      // create text node\n      this.node.appendChild(document.createTextNode(text))\n\n      return this\n    }\n  }\n})\n\n\nSVG.extend(SVG.Parent, {\n  // Create an element that is not described by SVG.js\n  element: function(element, inherit) {\n    return this.put(new SVG.Bare(element, inherit))\n  }\n  // Add symbol element\n, symbol: function() {\n    return this.defs().element('symbol', SVG.Container)\n  }\n\n})\nSVG.Use = SVG.invent({\n  // Initialize node\n  create: 'use'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Use element as a reference\n    element: function(element, file) {\n      // Set lined element\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a use element\n    use: function(element, file) {\n      return this.put(new SVG.Use).element(element, file)\n    }\n  }\n})\nSVG.Rect = SVG.invent({\n  // Initialize node\n  create: 'rect'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create a rect element\n    rect: function(width, height) {\n      return this.put(new SVG.Rect()).size(width, height)\n    }\n  }\n})\nSVG.Circle = SVG.invent({\n  // Initialize node\n  create: 'circle'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create circle element, based on ellipse\n    circle: function(size) {\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\n    }\n  }\n})\n\nSVG.extend(SVG.Circle, SVG.FX, {\n  // Radius x value\n  rx: function(rx) {\n    return this.attr('r', rx)\n  }\n  // Alias radius x value\n, ry: function(ry) {\n    return this.rx(ry)\n  }\n})\n\nSVG.Ellipse = SVG.invent({\n  // Initialize node\n  create: 'ellipse'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create an ellipse\n    ellipse: function(width, height) {\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\n    }\n  }\n})\n\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\n  // Radius x value\n  rx: function(rx) {\n    return this.attr('rx', rx)\n  }\n  // Radius y value\n, ry: function(ry) {\n    return this.attr('ry', ry)\n  }\n})\n\n// Add common method\nSVG.extend(SVG.Circle, SVG.Ellipse, {\n    // Move over x-axis\n    x: function(x) {\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\n    }\n    // Move over y-axis\n  , y: function(y) {\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\n    }\n    // Move by center over x-axis\n  , cx: function(x) {\n      return x == null ? this.attr('cx') : this.attr('cx', x)\n    }\n    // Move by center over y-axis\n  , cy: function(y) {\n      return y == null ? this.attr('cy') : this.attr('cy', y)\n    }\n    // Set width of element\n  , width: function(width) {\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\n    }\n    // Set height of element\n  , height: function(height) {\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\n    }\n    // Custom size function\n  , size: function(width, height) {\n      var p = proportionalSize(this, width, height)\n\n      return this\n        .rx(new SVG.Number(p.width).divide(2))\n        .ry(new SVG.Number(p.height).divide(2))\n    }\n})\nSVG.Line = SVG.invent({\n  // Initialize node\n  create: 'line'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Get array\n    array: function() {\n      return new SVG.PointArray([\n        [ this.attr('x1'), this.attr('y1') ]\n      , [ this.attr('x2'), this.attr('y2') ]\n      ])\n    }\n    // Overwrite native plot() method\n  , plot: function(x1, y1, x2, y2) {\n      if (typeof y1 !== 'undefined')\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\n      else\n        x1 = new SVG.PointArray(x1).toLine()\n\n      return this.attr(x1)\n    }\n    // Move by left top corner\n  , move: function(x, y) {\n      return this.attr(this.array().move(x, y).toLine())\n    }\n    // Set element size to given width and height\n  , size: function(width, height) {\n      var p = proportionalSize(this, width, height)\n\n      return this.attr(this.array().size(p.width, p.height).toLine())\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a line element\n    line: function(x1, y1, x2, y2) {\n      return this.put(new SVG.Line).plot(x1, y1, x2, y2)\n    }\n  }\n})\n\nSVG.Polyline = SVG.invent({\n  // Initialize node\n  create: 'polyline'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create a wrapped polyline element\n    polyline: function(p) {\n      return this.put(new SVG.Polyline).plot(p)\n    }\n  }\n})\n\nSVG.Polygon = SVG.invent({\n  // Initialize node\n  create: 'polygon'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create a wrapped polygon element\n    polygon: function(p) {\n      return this.put(new SVG.Polygon).plot(p)\n    }\n  }\n})\n\n// Add polygon-specific functions\nSVG.extend(SVG.Polyline, SVG.Polygon, {\n  // Get array\n  array: function() {\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\n  }\n  // Plot new path\n, plot: function(p) {\n    return this.attr('points', (this._array = new SVG.PointArray(p)))\n  }\n  // Move by left top corner\n, move: function(x, y) {\n    return this.attr('points', this.array().move(x, y))\n  }\n  // Set element size to given width and height\n, size: function(width, height) {\n    var p = proportionalSize(this, width, height)\n\n    return this.attr('points', this.array().size(p.width, p.height))\n  }\n\n})\n// unify all point to point elements\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\n  // Define morphable array\n  morphArray:  SVG.PointArray\n  // Move by left top corner over x-axis\n, x: function(x) {\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n  }\n  // Move by left top corner over y-axis\n, y: function(y) {\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n  }\n  // Set width of element\n, width: function(width) {\n    var b = this.bbox()\n\n    return width == null ? b.width : this.size(width, b.height)\n  }\n  // Set height of element\n, height: function(height) {\n    var b = this.bbox()\n\n    return height == null ? b.height : this.size(b.width, height)\n  }\n})\nSVG.Path = SVG.invent({\n  // Initialize node\n  create: 'path'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Define morphable array\n    morphArray:  SVG.PathArray\n    // Get array\n  , array: function() {\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\n    }\n    // Plot new poly points\n  , plot: function(p) {\n      return this.attr('d', (this._array = new SVG.PathArray(p)))\n    }\n    // Move by left top corner\n  , move: function(x, y) {\n      return this.attr('d', this.array().move(x, y))\n    }\n    // Move by left top corner over x-axis\n  , x: function(x) {\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n    }\n    // Move by left top corner over y-axis\n  , y: function(y) {\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n    }\n    // Set element size to given width and height\n  , size: function(width, height) {\n      var p = proportionalSize(this, width, height)\n\n      return this.attr('d', this.array().size(p.width, p.height))\n    }\n    // Set width of element\n  , width: function(width) {\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\n    }\n    // Set height of element\n  , height: function(height) {\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\n    }\n\n  }\n\n  // Add parent method\n, construct: {\n    // Create a wrapped path element\n    path: function(d) {\n      return this.put(new SVG.Path).plot(d)\n    }\n  }\n})\nSVG.Image = SVG.invent({\n  // Initialize node\n  create: 'image'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // (re)load image\n    load: function(url) {\n      if (!url) return this\n\n      var self = this\n        , img  = document.createElement('img')\n\n      // preload image\n      img.onload = function() {\n        var p = self.parent(SVG.Pattern)\n\n        if(p === null) return\n\n        // ensure image size\n        if (self.width() == 0 && self.height() == 0)\n          self.size(img.width, img.height)\n\n        // ensure pattern size if not set\n        if (p && p.width() == 0 && p.height() == 0)\n          p.size(self.width(), self.height())\n\n        // callback\n        if (typeof self._loaded === 'function')\n          self._loaded.call(self, {\n            width:  img.width\n          , height: img.height\n          , ratio:  img.width / img.height\n          , url:    url\n          })\n      }\n\n      img.onerror = function(e){\n        if (typeof self._error === 'function'){\n            self._error.call(self, e)\n        }\n      }\n\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\n    }\n    // Add loaded callback\n  , loaded: function(loaded) {\n      this._loaded = loaded\n      return this\n    }\n\n  , error: function(error) {\n      this._error = error\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // create image element, load image and set its size\n    image: function(source, width, height) {\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\n    }\n  }\n\n})\nSVG.Text = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('text'))\n\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\n    this._rebuild = true                      // enable automatic updating of dy values\n    this._build   = false                     // disable build mode for adding multiple lines\n\n    // set default font\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\n  }\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Move over x-axis\n    x: function(x) {\n      // act as getter\n      if (x == null)\n        return this.attr('x')\n\n      // move lines as well if no textPath is present\n      if (!this.textPath)\n        this.lines().each(function() { if (this.dom.newLined) this.x(x) })\n\n      return this.attr('x', x)\n    }\n    // Move over y-axis\n  , y: function(y) {\n      var oy = this.attr('y')\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\n\n      // act as getter\n      if (y == null)\n        return typeof oy === 'number' ? oy - o : oy\n\n      return this.attr('y', typeof y === 'number' ? y + o : y)\n    }\n    // Move center over x-axis\n  , cx: function(x) {\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\n    }\n    // Move center over y-axis\n  , cy: function(y) {\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\n    }\n    // Set the text content\n  , text: function(text) {\n      // act as getter\n      if (typeof text === 'undefined'){\n        var text = ''\n        var children = this.node.childNodes\n        for(var i = 0, len = children.length; i < len; ++i){\n\n          // add newline if its not the first child and newLined is set to true\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\n            text += '\\n'\n          }\n\n          // add content of this node\n          text += children[i].textContent\n        }\n\n        return text\n      }\n\n      // remove existing content\n      this.clear().build(true)\n\n      if (typeof text === 'function') {\n        // call block\n        text.call(this, this)\n\n      } else {\n        // store text and make sure text is not blank\n        text = text.split('\\n')\n\n        // build new lines\n        for (var i = 0, il = text.length; i < il; i++)\n          this.tspan(text[i]).newLine()\n      }\n\n      // disable build mode and rebuild lines\n      return this.build(false).rebuild()\n    }\n    // Set font size\n  , size: function(size) {\n      return this.attr('font-size', size).rebuild()\n    }\n    // Set / get leading\n  , leading: function(value) {\n      // act as getter\n      if (value == null)\n        return this.dom.leading\n\n      // act as setter\n      this.dom.leading = new SVG.Number(value)\n\n      return this.rebuild()\n    }\n    // Get all the first level lines\n  , lines: function() {\n      var node = (this.textPath && this.textPath() || this).node\n\n      // filter tspans and map them to SVG.js instances\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\n        return SVG.adopt(el)\n      })\n\n      // return an instance of SVG.set\n      return new SVG.Set(lines)\n    }\n    // Rebuild appearance type\n  , rebuild: function(rebuild) {\n      // store new rebuild flag if given\n      if (typeof rebuild == 'boolean')\n        this._rebuild = rebuild\n\n      // define position of all lines\n      if (this._rebuild) {\n        var self = this\n          , blankLineOffset = 0\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\n\n        this.lines().each(function() {\n          if (this.dom.newLined) {\n            if (!this.textPath)\n              this.attr('x', self.attr('x'))\n\n            if(this.text() == '\\n') {\n              blankLineOffset += dy\n            }else{\n              this.attr('dy', dy + blankLineOffset)\n              blankLineOffset = 0\n            }\n          }\n        })\n\n        this.fire('rebuild')\n      }\n\n      return this\n    }\n    // Enable / disable build mode\n  , build: function(build) {\n      this._build = !!build\n      return this\n    }\n    // overwrite method from parent to set data properly\n  , setData: function(o){\n      this.dom = o\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create text element\n    text: function(text) {\n      return this.put(new SVG.Text).text(text)\n    }\n    // Create plain text element\n  , plain: function(text) {\n      return this.put(new SVG.Text).plain(text)\n    }\n  }\n\n})\n\nSVG.Tspan = SVG.invent({\n  // Initialize node\n  create: 'tspan'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Set text content\n    text: function(text) {\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\n\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\n\n      return this\n    }\n    // Shortcut dx\n  , dx: function(dx) {\n      return this.attr('dx', dx)\n    }\n    // Shortcut dy\n  , dy: function(dy) {\n      return this.attr('dy', dy)\n    }\n    // Create new line\n  , newLine: function() {\n      // fetch text parent\n      var t = this.parent(SVG.Text)\n\n      // mark new line\n      this.dom.newLined = true\n\n      // apply new hy¡n\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\n    }\n  }\n\n})\n\nSVG.extend(SVG.Text, SVG.Tspan, {\n  // Create plain text node\n  plain: function(text) {\n    // clear if build mode is disabled\n    if (this._build === false)\n      this.clear()\n\n    // create text node\n    this.node.appendChild(document.createTextNode(text))\n\n    return this\n  }\n  // Create a tspan\n, tspan: function(text) {\n    var node  = (this.textPath && this.textPath() || this).node\n      , tspan = new SVG.Tspan\n\n    // clear if build mode is disabled\n    if (this._build === false)\n      this.clear()\n\n    // add new tspan\n    node.appendChild(tspan.node)\n\n    return tspan.text(text)\n  }\n  // Clear all lines\n, clear: function() {\n    var node = (this.textPath && this.textPath() || this).node\n\n    // remove existing child nodes\n    while (node.hasChildNodes())\n      node.removeChild(node.lastChild)\n\n    return this\n  }\n  // Get length of text element\n, length: function() {\n    return this.node.getComputedTextLength()\n  }\n})\n\nSVG.TextPath = SVG.invent({\n  // Initialize node\n  create: 'textPath'\n\n  // Inherit from\n, inherit: SVG.Parent\n\n  // Define parent class\n, parent: SVG.Text\n\n  // Add parent method\n, construct: {\n    // Create path for text to run on\n    path: function(d) {\n      // create textPath element\n      var path  = new SVG.TextPath\n        , track = this.doc().defs().path(d)\n\n      // move lines to textpath\n      while (this.node.hasChildNodes())\n        path.node.appendChild(this.node.firstChild)\n\n      // add textPath element as child node\n      this.node.appendChild(path.node)\n\n      // link textPath to path and add content\n      path.attr('href', '#' + track, SVG.xlink)\n\n      return this\n    }\n    // Plot path if any\n  , plot: function(d) {\n      var track = this.track()\n\n      if (track)\n        track.plot(d)\n\n      return this\n    }\n    // Get the path track element\n  , track: function() {\n      var path = this.textPath()\n\n      if (path)\n        return path.reference('href')\n    }\n    // Get the textPath child\n  , textPath: function() {\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\n        return SVG.adopt(this.node.firstChild)\n    }\n  }\n})\nSVG.Nested = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('svg'))\n\n    this.style('overflow', 'visible')\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add parent method\n, construct: {\n    // Create nested svg document\n    nested: function() {\n      return this.put(new SVG.Nested)\n    }\n  }\n})\nSVG.A = SVG.invent({\n  // Initialize node\n  create: 'a'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Link url\n    to: function(url) {\n      return this.attr('href', url, SVG.xlink)\n    }\n    // Link show attribute\n  , show: function(target) {\n      return this.attr('show', target, SVG.xlink)\n    }\n    // Link target attribute\n  , target: function(target) {\n      return this.attr('target', target)\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a hyperlink element\n    link: function(url) {\n      return this.put(new SVG.A).to(url)\n    }\n  }\n})\n\nSVG.extend(SVG.Element, {\n  // Create a hyperlink element\n  linkTo: function(url) {\n    var link = new SVG.A\n\n    if (typeof url == 'function')\n      url.call(link, link)\n    else\n      link.to(url)\n\n    return this.parent().put(link).put(this)\n  }\n\n})\nSVG.Marker = SVG.invent({\n  // Initialize node\n  create: 'marker'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Set width of element\n    width: function(width) {\n      return this.attr('markerWidth', width)\n    }\n    // Set height of element\n  , height: function(height) {\n      return this.attr('markerHeight', height)\n    }\n    // Set marker refX and refY\n  , ref: function(x, y) {\n      return this.attr('refX', x).attr('refY', y)\n    }\n    // Update marker\n  , update: function(block) {\n      // remove all content\n      this.clear()\n\n      // invoke passed block\n      if (typeof block == 'function')\n        block.call(this, this)\n\n      return this\n    }\n    // Return the fill id\n  , toString: function() {\n      return 'url(#' + this.id() + ')'\n    }\n  }\n\n  // Add parent method\n, construct: {\n    marker: function(width, height, block) {\n      // Create marker element in defs\n      return this.defs().marker(width, height, block)\n    }\n  }\n\n})\n\nSVG.extend(SVG.Defs, {\n  // Create marker\n  marker: function(width, height, block) {\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n    return this.put(new SVG.Marker)\n      .size(width, height)\n      .ref(width / 2, height / 2)\n      .viewbox(0, 0, width, height)\n      .attr('orient', 'auto')\n      .update(block)\n  }\n\n})\n\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\n  // Create and attach markers\n  marker: function(marker, width, height, block) {\n    var attr = ['marker']\n\n    // Build attribute name\n    if (marker != 'all') attr.push(marker)\n    attr = attr.join('-')\n\n    // Set marker attribute\n    marker = arguments[1] instanceof SVG.Marker ?\n      arguments[1] :\n      this.doc().marker(width, height, block)\n\n    return this.attr(attr, marker)\n  }\n\n})\n// Define list of available attributes for stroke and fill\nvar sugar = {\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\n, fill:   ['color', 'opacity', 'rule']\n, prefix: function(t, a) {\n    return a == 'color' ? t : t + '-' + a\n  }\n}\n\n// Add sugar for fill and stroke\n;['fill', 'stroke'].forEach(function(m) {\n  var i, extension = {}\n\n  extension[m] = function(o) {\n    if (typeof o == 'undefined')\n      return this\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\n      this.attr(m, o)\n\n    else\n      // set all attributes from sugar.fill and sugar.stroke list\n      for (i = sugar[m].length - 1; i >= 0; i--)\n        if (o[sugar[m][i]] != null)\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\n\n    return this\n  }\n\n  SVG.extend(SVG.Element, SVG.FX, extension)\n\n})\n\nSVG.extend(SVG.Element, SVG.FX, {\n  // Map rotation to transform\n  rotate: function(d, cx, cy) {\n    return this.transform({ rotation: d, cx: cx, cy: cy })\n  }\n  // Map skew to transform\n, skew: function(x, y, cx, cy) {\n    return arguments.length == 1  || arguments.length == 3 ?\n      this.transform({ skew: x, cx: y, cy: cx }) :\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\n  }\n  // Map scale to transform\n, scale: function(x, y, cx, cy) {\n    return arguments.length == 1  || arguments.length == 3 ?\n      this.transform({ scale: x, cx: y, cy: cx }) :\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\n  }\n  // Map translate to transform\n, translate: function(x, y) {\n    return this.transform({ x: x, y: y })\n  }\n  // Map flip to transform\n, flip: function(a, o) {\n    return this.transform({ flip: a, offset: o })\n  }\n  // Map matrix to transform\n, matrix: function(m) {\n    return this.attr('transform', new SVG.Matrix(m))\n  }\n  // Opacity\n, opacity: function(value) {\n    return this.attr('opacity', value)\n  }\n  // Relative move over x axis\n, dx: function(x) {\n    return this.x((this instanceof SVG.FX ? 0 : this.x()) + x, true)\n  }\n  // Relative move over y axis\n, dy: function(y) {\n    return this.y((this instanceof SVG.FX ? 0 : this.y()) + y, true)\n  }\n  // Relative move over x and y axes\n, dmove: function(x, y) {\n    return this.dx(x).dy(y)\n  }\n})\n\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\n  // Add x and y radius\n  radius: function(x, y) {\n    var type = (this._target || this).type;\n    return type == 'radial' || type == 'circle' ?\n      this.attr('r', new SVG.Number(x)) :\n      this.rx(x).ry(y == null ? x : y)\n  }\n})\n\nSVG.extend(SVG.Path, {\n  // Get path length\n  length: function() {\n    return this.node.getTotalLength()\n  }\n  // Get point at length\n, pointAt: function(length) {\n    return this.node.getPointAtLength(length)\n  }\n})\n\nSVG.extend(SVG.Parent, SVG.Text, SVG.FX, {\n  // Set font\n  font: function(o) {\n    for (var k in o)\n      k == 'leading' ?\n        this.leading(o[k]) :\n      k == 'anchor' ?\n        this.attr('text-anchor', o[k]) :\n      k == 'size' || k == 'family' || k == 'weight' || k == 'stretch' || k == 'variant' || k == 'style' ?\n        this.attr('font-'+ k, o[k]) :\n        this.attr(k, o[k])\n\n    return this\n  }\n})\n\nSVG.Set = SVG.invent({\n  // Initialize\n  create: function(members) {\n    // Set initial state\n    Array.isArray(members) ? this.members = members : this.clear()\n  }\n\n  // Add class methods\n, extend: {\n    // Add element to set\n    add: function() {\n      var i, il, elements = [].slice.call(arguments)\n\n      for (i = 0, il = elements.length; i < il; i++)\n        this.members.push(elements[i])\n\n      return this\n    }\n    // Remove element from set\n  , remove: function(element) {\n      var i = this.index(element)\n\n      // remove given child\n      if (i > -1)\n        this.members.splice(i, 1)\n\n      return this\n    }\n    // Iterate over all members\n  , each: function(block) {\n      for (var i = 0, il = this.members.length; i < il; i++)\n        block.apply(this.members[i], [i, this.members])\n\n      return this\n    }\n    // Restore to defaults\n  , clear: function() {\n      // initialize store\n      this.members = []\n\n      return this\n    }\n    // Get the length of a set\n  , length: function() {\n      return this.members.length\n    }\n    // Checks if a given element is present in set\n  , has: function(element) {\n      return this.index(element) >= 0\n    }\n    // retuns index of given element in set\n  , index: function(element) {\n      return this.members.indexOf(element)\n    }\n    // Get member at given index\n  , get: function(i) {\n      return this.members[i]\n    }\n    // Get first member\n  , first: function() {\n      return this.get(0)\n    }\n    // Get last member\n  , last: function() {\n      return this.get(this.members.length - 1)\n    }\n    // Default value\n  , valueOf: function() {\n      return this.members\n    }\n    // Get the bounding box of all members included or empty box if set has no items\n  , bbox: function(){\n      var box = new SVG.BBox()\n\n      // return an empty box of there are no members\n      if (this.members.length == 0)\n        return box\n\n      // get the first rbox and update the target bbox\n      var rbox = this.members[0].rbox()\n      box.x      = rbox.x\n      box.y      = rbox.y\n      box.width  = rbox.width\n      box.height = rbox.height\n\n      this.each(function() {\n        // user rbox for correct position and visual representation\n        box = box.merge(this.rbox())\n      })\n\n      return box\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a new set\n    set: function(members) {\n      return new SVG.Set(members)\n    }\n  }\n})\n\nSVG.FX.Set = SVG.invent({\n  // Initialize node\n  create: function(set) {\n    // store reference to set\n    this.set = set\n  }\n\n})\n\n// Alias methods\nSVG.Set.inherit = function() {\n  var m\n    , methods = []\n\n  // gather shape methods\n  for(var m in SVG.Shape.prototype)\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\n      methods.push(m)\n\n  // apply shape aliasses\n  methods.forEach(function(method) {\n    SVG.Set.prototype[method] = function() {\n      for (var i = 0, il = this.members.length; i < il; i++)\n        if (this.members[i] && typeof this.members[i][method] == 'function')\n          this.members[i][method].apply(this.members[i], arguments)\n\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\n    }\n  })\n\n  // clear methods for the next round\n  methods = []\n\n  // gather fx methods\n  for(var m in SVG.FX.prototype)\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\n      methods.push(m)\n\n  // apply fx aliasses\n  methods.forEach(function(method) {\n    SVG.FX.Set.prototype[method] = function() {\n      for (var i = 0, il = this.set.members.length; i < il; i++)\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\n\n      return this\n    }\n  })\n}\n\n\n\n\nSVG.extend(SVG.Element, {\n  // Store data values on svg nodes\n  data: function(a, v, r) {\n    if (typeof a == 'object') {\n      for (v in a)\n        this.data(v, a[v])\n\n    } else if (arguments.length < 2) {\n      try {\n        return JSON.parse(this.attr('data-' + a))\n      } catch(e) {\n        return this.attr('data-' + a)\n      }\n\n    } else {\n      this.attr(\n        'data-' + a\n      , v === null ?\n          null :\n        r === true || typeof v === 'string' || typeof v === 'number' ?\n          v :\n          JSON.stringify(v)\n      )\n    }\n\n    return this\n  }\n})\nSVG.extend(SVG.Element, {\n  // Remember arbitrary data\n  remember: function(k, v) {\n    // remember every item in an object individually\n    if (typeof arguments[0] == 'object')\n      for (var v in k)\n        this.remember(v, k[v])\n\n    // retrieve memory\n    else if (arguments.length == 1)\n      return this.memory()[k]\n\n    // store memory\n    else\n      this.memory()[k] = v\n\n    return this\n  }\n\n  // Erase a given memory\n, forget: function() {\n    if (arguments.length == 0)\n      this._memory = {}\n    else\n      for (var i = arguments.length - 1; i >= 0; i--)\n        delete this.memory()[arguments[i]]\n\n    return this\n  }\n\n  // Initialize or return local memory object\n, memory: function() {\n    return this._memory || (this._memory = {})\n  }\n\n})\n// Method for getting an element by id\nSVG.get = function(id) {\n  var node = document.getElementById(idFromReference(id) || id)\n  return SVG.adopt(node)\n}\n\n// Select elements by query string\nSVG.select = function(query, parent) {\n  return new SVG.Set(\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\n      return SVG.adopt(node)\n    })\n  )\n}\n\nSVG.extend(SVG.Parent, {\n  // Scoped select method\n  select: function(query) {\n    return SVG.select(query, this.node)\n  }\n\n})\nfunction is(el, obj){\n  return el instanceof obj\n}\n\n// tests if a given selector matches an element\nfunction matches(el, selector) {\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n}\n\n// Convert dash-separated-string to camelCase\nfunction camelCase(s) {\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\n    return g.toUpperCase()\n  })\n}\n\n// Capitalize first letter of a string\nfunction capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n// Ensure to six-based hex\nfunction fullHex(hex) {\n  return hex.length == 4 ?\n    [ '#',\n      hex.substring(1, 2), hex.substring(1, 2)\n    , hex.substring(2, 3), hex.substring(2, 3)\n    , hex.substring(3, 4), hex.substring(3, 4)\n    ].join('') : hex\n}\n\n// Component to hex value\nfunction compToHex(comp) {\n  var hex = comp.toString(16)\n  return hex.length == 1 ? '0' + hex : hex\n}\n\n// Calculate proportional width and height values when necessary\nfunction proportionalSize(element, width, height) {\n  if (width == null || height == null) {\n    var box = element.bbox()\n\n    if (width == null)\n      width = box.width / box.height * height\n    else if (height == null)\n      height = box.height / box.width * width\n  }\n\n  return {\n    width:  width\n  , height: height\n  }\n}\n\n// Delta transform point\nfunction deltaTransformPoint(matrix, x, y) {\n  return {\n    x: x * matrix.a + y * matrix.c + 0\n  , y: x * matrix.b + y * matrix.d + 0\n  }\n}\n\n// Map matrix array to object\nfunction arrayToMatrix(a) {\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\n}\n\n// Parse matrix if required\nfunction parseMatrix(matrix) {\n  if (!(matrix instanceof SVG.Matrix))\n    matrix = new SVG.Matrix(matrix)\n\n  return matrix\n}\n\n// Add centre point to transform object\nfunction ensureCentre(o, target) {\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\n}\n\n// Convert string to matrix\nfunction stringToMatrix(source) {\n  // remove matrix wrapper and split to individual numbers\n  source = source\n    .replace(SVG.regex.whitespace, '')\n    .replace(SVG.regex.matrix, '')\n    .split(SVG.regex.matrixElements)\n\n  // convert string values to floats and convert to a matrix-formatted object\n  return arrayToMatrix(\n    SVG.utils.map(source, function(n) {\n      return parseFloat(n)\n    })\n  )\n}\n\n// Calculate position according to from and to\nfunction at(o, pos) {\n  // number recalculation (don't bother converting to SVG.Number for performance reasons)\n  return typeof o.from == 'number' ?\n    o.from + (o.to - o.from) * pos :\n\n  // instance recalculation\n  o instanceof SVG.Color || o instanceof SVG.Number || o instanceof SVG.Matrix ? o.at(pos) :\n\n  // for all other values wait until pos has reached 1 to return the final value\n  pos < 1 ? o.from : o.to\n}\n\n// PathArray Helpers\nfunction arrayToString(a) {\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\n    s += a[i][0]\n\n    if (a[i][1] != null) {\n      s += a[i][1]\n\n      if (a[i][2] != null) {\n        s += ' '\n        s += a[i][2]\n\n        if (a[i][3] != null) {\n          s += ' '\n          s += a[i][3]\n          s += ' '\n          s += a[i][4]\n\n          if (a[i][5] != null) {\n            s += ' '\n            s += a[i][5]\n            s += ' '\n            s += a[i][6]\n\n            if (a[i][7] != null) {\n              s += ' '\n              s += a[i][7]\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return s + ' '\n}\n\n// Deep new id assignment\nfunction assignNewId(node) {\n  // do the same for SVG child nodes as well\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\n    if (node.childNodes[i] instanceof SVGElement)\n      assignNewId(node.childNodes[i])\n\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\n}\n\n// Add more bounding box properties\nfunction fullBox(b) {\n  if (b.x == null) {\n    b.x      = 0\n    b.y      = 0\n    b.width  = 0\n    b.height = 0\n  }\n\n  b.w  = b.width\n  b.h  = b.height\n  b.x2 = b.x + b.width\n  b.y2 = b.y + b.height\n  b.cx = b.x + b.width / 2\n  b.cy = b.y + b.height / 2\n\n  return b\n}\n\n// Get id from reference string\nfunction idFromReference(url) {\n  var m = url.toString().match(SVG.regex.reference)\n\n  if (m) return m[1]\n}\n\n// Create matrix array for looping\nvar abcdef = 'abcdef'.split('')\n// Add CustomEvent to IE9 and IE10\nif (typeof CustomEvent !== 'function') {\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n  var CustomEvent = function(event, options) {\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\n    var e = document.createEvent('CustomEvent')\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\n    return e\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n}\n\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\n(function(w) {\n  var lastTime = 0\n  var vendors = ['moz', 'webkit']\n\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\n  }\n\n  w.requestAnimationFrame = w.requestAnimationFrame ||\n    function(callback) {\n      var currTime = new Date().getTime()\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\n\n      var id = w.setTimeout(function() {\n        callback(currTime + timeToCall)\n      }, timeToCall)\n\n      lastTime = currTime + timeToCall\n      return id\n    }\n\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\n\n}(window))\n\nreturn SVG\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/svg.js/dist/svg.js\n// module id = 2\n// module chunks = 0","/*! svg.draggable.js - v2.2.1 - 2016-08-25\r\n* https://github.com/wout/svg.draggable.js\r\n* Copyright (c) 2016 Wout Fierens; Licensed MIT */\r\n;(function() {\r\n\r\n  // creates handler, saves it\r\n  function DragHandler(el){\r\n    el.remember('_draggable', this)\r\n    this.el = el\r\n  }\r\n\r\n\r\n  // Sets new parameter, starts dragging\r\n  DragHandler.prototype.init = function(constraint, val){\r\n    var _this = this\r\n    this.constraint = constraint\r\n    this.value = val\r\n    this.el.on('mousedown.drag', function(e){ _this.start(e) })\r\n    this.el.on('touchstart.drag', function(e){ _this.start(e) })\r\n  }\r\n\r\n  // transforms one point from screen to user coords\r\n  DragHandler.prototype.transformPoint = function(event, offset){\r\n      event = event || window.event\r\n      var touches = event.changedTouches && event.changedTouches[0] || event\r\n      this.p.x = touches.pageX - (offset || 0)\r\n      this.p.y = touches.pageY\r\n      return this.p.matrixTransform(this.m)\r\n  }\r\n  \r\n  // gets elements bounding box with special handling of groups, nested and use\r\n  DragHandler.prototype.getBBox = function(){\r\n\r\n    var box = this.el.bbox()\r\n\r\n    if(this.el instanceof SVG.Nested) box = this.el.rbox()\r\n    \r\n    if (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) {\r\n      box.x = this.el.x()\r\n      box.y = this.el.y()\r\n    }\r\n\r\n    return box\r\n  }\r\n\r\n  // start dragging\r\n  DragHandler.prototype.start = function(e){\r\n\r\n    // check for left button\r\n    if(e.type == 'click'|| e.type == 'mousedown' || e.type == 'mousemove'){\r\n      if((e.which || e.buttons) != 1){\r\n          return\r\n      }\r\n    }\r\n  \r\n    var _this = this\r\n\r\n    // fire beforedrag event\r\n    this.el.fire('beforedrag', { event: e, handler: this })\r\n\r\n    // search for parent on the fly to make sure we can call\r\n    // draggable() even when element is not in the dom currently\r\n    this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc)\r\n    this.p = this.parent.node.createSVGPoint()\r\n\r\n    // save current transformation matrix\r\n    this.m = this.el.node.getScreenCTM().inverse()\r\n\r\n    var box = this.getBBox()\r\n    \r\n    var anchorOffset;\r\n    \r\n    // fix text-anchor in text-element (#37)\r\n    if(this.el instanceof SVG.Text){\r\n      anchorOffset = this.el.node.getComputedTextLength();\r\n        \r\n      switch(this.el.attr('text-anchor')){\r\n        case 'middle':\r\n          anchorOffset /= 2;\r\n          break\r\n        case 'start':\r\n          anchorOffset = 0;\r\n          break;\r\n      }\r\n    }\r\n    \r\n    this.startPoints = {\r\n      // We take absolute coordinates since we are just using a delta here\r\n      point: this.transformPoint(e, anchorOffset),\r\n      box:   box,\r\n      transform: this.el.transform()\r\n    }\r\n    \r\n    // add drag and end events to window\r\n    SVG.on(window, 'mousemove.drag', function(e){ _this.drag(e) })\r\n    SVG.on(window, 'touchmove.drag', function(e){ _this.drag(e) })\r\n    SVG.on(window, 'mouseup.drag', function(e){ _this.end(e) })\r\n    SVG.on(window, 'touchend.drag', function(e){ _this.end(e) })\r\n\r\n    // fire dragstart event\r\n    this.el.fire('dragstart', {event: e, p: this.startPoints.point, m: this.m, handler: this})\r\n\r\n    // prevent browser drag behavior\r\n    e.preventDefault()\r\n\r\n    // prevent propagation to a parent that might also have dragging enabled\r\n    e.stopPropagation();\r\n  }\r\n\r\n  // while dragging\r\n  DragHandler.prototype.drag = function(e){\r\n\r\n    var box = this.getBBox()\r\n      , p   = this.transformPoint(e)\r\n      , x   = this.startPoints.box.x + p.x - this.startPoints.point.x\r\n      , y   = this.startPoints.box.y + p.y - this.startPoints.point.y\r\n      , c   = this.constraint\r\n      , gx  = p.x - this.startPoints.point.x\r\n      , gy  = p.y - this.startPoints.point.y\r\n      \r\n    var event = new CustomEvent('dragmove', {\r\n        detail: {\r\n            event: e\r\n          , p: p\r\n          , m: this.m\r\n          , handler: this\r\n        }\r\n      , cancelable: true\r\n    })\r\n      \r\n    this.el.fire(event)\r\n    \r\n    if(event.defaultPrevented) return p\r\n\r\n    // move the element to its new position, if possible by constraint\r\n    if (typeof c == 'function') {\r\n\r\n      var coord = c.call(this.el, x, y, this.m)\r\n\r\n      // bool, just show us if movement is allowed or not\r\n      if (typeof coord == 'boolean') {\r\n        coord = {\r\n          x: coord,\r\n          y: coord\r\n        }\r\n      }\r\n\r\n      // if true, we just move. If !false its a number and we move it there\r\n      if (coord.x === true) {\r\n        this.el.x(x)\r\n      } else if (coord.x !== false) {\r\n        this.el.x(coord.x)\r\n      }\r\n\r\n      if (coord.y === true) {\r\n        this.el.y(y)\r\n      } else if (coord.y !== false) {\r\n        this.el.y(coord.y)\r\n      }\r\n\r\n    } else if (typeof c == 'object') {\r\n\r\n      // keep element within constrained box\r\n      if (c.minX != null && x < c.minX)\r\n        x = c.minX\r\n      else if (c.maxX != null && x > c.maxX - box.width){\r\n        x = c.maxX - box.width\r\n      }if (c.minY != null && y < c.minY)\r\n        y = c.minY\r\n      else if (c.maxY != null && y > c.maxY - box.height)\r\n        y = c.maxY - box.height\r\n        \r\n      if(this.el instanceof SVG.G)\r\n        this.el.matrix(this.startPoints.transform).transform({x:gx, y: gy}, true)\r\n      else\r\n        this.el.move(x, y)\r\n    }\r\n    \r\n    // so we can use it in the end-method, too\r\n    return p\r\n  }\r\n\r\n  DragHandler.prototype.end = function(e){\r\n\r\n    // final drag\r\n    var p = this.drag(e);\r\n\r\n    // fire dragend event\r\n    this.el.fire('dragend', { event: e, p: p, m: this.m, handler: this })\r\n\r\n    // unbind events\r\n    SVG.off(window, 'mousemove.drag')\r\n    SVG.off(window, 'touchmove.drag')\r\n    SVG.off(window, 'mouseup.drag')\r\n    SVG.off(window, 'touchend.drag')\r\n\r\n  }\r\n\r\n  SVG.extend(SVG.Element, {\r\n    // Make element draggable\r\n    // Constraint might be an object (as described in readme.md) or a function in the form \"function (x, y)\" that gets called before every move.\r\n    // The function can return a boolean or an object of the form {x, y}, to which the element will be moved. \"False\" skips moving, true moves to raw x, y.\r\n    draggable: function(value, constraint) {\r\n\r\n      // Check the parameters and reassign if needed\r\n      if (typeof value == 'function' || typeof value == 'object') {\r\n        constraint = value\r\n        value = true\r\n      }\r\n\r\n      var dragHandler = this.remember('_draggable') || new DragHandler(this)\r\n\r\n      // When no parameter is given, value is true\r\n      value = typeof value === 'undefined' ? true : value\r\n\r\n      if(value) dragHandler.init(constraint || {}, value)\r\n      else {\r\n        this.off('mousedown.drag')\r\n        this.off('touchstart.drag')\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n  })\r\n\r\n}).call(this);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/svg.draggable.js/dist/svg.draggable.js\n// module id = 3\n// module chunks = 0","/*! svg.select.js - v2.0.2 - 2016-03-12\r\n* https://github.com/Fuzzyma/svg.select.js\r\n* Copyright (c) 2016 Ulrich-Matthias Schäfer; Licensed MIT */\r\n/*jshint -W083*/\r\n;(function (undefined) {\r\n\r\n    function SelectHandler(el) {\r\n\r\n        this.el = el;\r\n        this.parent = el.parent();\r\n        el.remember('_selectHandler', this);\r\n        this.pointSelection = {isSelected: false};\r\n        this.rectSelection = {isSelected: false};\r\n\r\n    }\r\n\r\n    SelectHandler.prototype.init = function (value, options) {\r\n\r\n        var bbox = this.el.bbox();\r\n        this.options = {};\r\n\r\n        // Merging the defaults and the options-object together\r\n        for (var i in this.el.selectize.defaults) {\r\n            this.options[i] = this.el.selectize.defaults[i];\r\n            if (options[i] !== undefined) {\r\n                this.options[i] = options[i];\r\n            }\r\n        }\r\n\r\n        this.nested = (this.nested || this.parent.group());\r\n        this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x, bbox.y));\r\n\r\n        // When deepSelect is enabled and the element is a line/polyline/polygon, draw only points for moving\r\n        if (this.options.deepSelect && ['line', 'polyline', 'polygon'].indexOf(this.el.type) !== -1) {\r\n            this.selectPoints(value);\r\n        } else {\r\n            this.selectRect(value);\r\n        }\r\n\r\n        this.observe();\r\n        this.cleanup();\r\n\r\n    };\r\n\r\n    SelectHandler.prototype.selectPoints = function (value) {\r\n\r\n        this.pointSelection.isSelected = value;\r\n\r\n        // When set is already there we dont have to create one\r\n        if (this.pointSelection.set) {\r\n            return this;\r\n        }\r\n\r\n        // Create our set of elements\r\n        this.pointSelection.set = this.parent.set();\r\n        // draw the circles and mark the element as selected\r\n        this.drawCircles();\r\n\r\n        return this;\r\n\r\n    };\r\n\r\n    // create the point-array which contains the 2 points of a line or simply the points-array of polyline/polygon\r\n    SelectHandler.prototype.getPointArray = function () {\r\n        var bbox = this.el.bbox();\r\n\r\n        return this.el.array().valueOf().map(function (el) {\r\n            return [el[0] - bbox.x, el[1] - bbox.y];\r\n        });\r\n    };\r\n\r\n    // The function to draw the circles\r\n    SelectHandler.prototype.drawCircles = function () {\r\n\r\n        var _this = this, array = this.getPointArray();\r\n\r\n        // go through the array of points\r\n        for (var i = 0, len = array.length; i < len; ++i) {\r\n\r\n            // add every point to the set\r\n            this.pointSelection.set.add(\r\n\r\n                // a circle with our css-classes and a mousedown-event which fires our event for moving points\r\n                this.nested.circle(this.options.radius)\r\n                    .center(array[i][0], array[i][1])\r\n                    .addClass(this.options.classPoints)\r\n                    .addClass(this.options.classPoints + '_point')\r\n                    .mousedown(\r\n                        (function (k) {\r\n                            return function (ev) {\r\n                                ev = ev || window.event;\r\n                                ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\r\n                                _this.el.fire('point', {x: ev.pageX, y: ev.pageY, i: k, event: ev});\r\n                            };\r\n                        })(i)\r\n                    )\r\n            );\r\n        }\r\n\r\n    };\r\n\r\n    // every time a circle is moved, we have to update the positions of our circle\r\n    SelectHandler.prototype.updatePointSelection = function () {\r\n        var array = this.getPointArray();\r\n\r\n        this.pointSelection.set.each(function (i) {\r\n            if (this.cx() === array[i][0] && this.cy() === array[i][1]) {\r\n                return;\r\n            }\r\n            this.center(array[i][0], array[i][1]);\r\n        });\r\n    };\r\n\r\n    SelectHandler.prototype.updateRectSelection = function () {\r\n        var bbox = this.el.bbox();\r\n\r\n        this.rectSelection.set.get(0).attr({\r\n            width: bbox.width,\r\n            height: bbox.height\r\n        });\r\n\r\n        // set.get(1) is always in the upper left corner. no need to move it\r\n        if (this.options.points) {\r\n            this.rectSelection.set.get(2).center(bbox.width, 0);\r\n            this.rectSelection.set.get(3).center(bbox.width, bbox.height);\r\n            this.rectSelection.set.get(4).center(0, bbox.height);\r\n\r\n            this.rectSelection.set.get(5).center(bbox.width / 2, 0);\r\n            this.rectSelection.set.get(6).center(bbox.width, bbox.height / 2);\r\n            this.rectSelection.set.get(7).center(bbox.width / 2, bbox.height);\r\n            this.rectSelection.set.get(8).center(0, bbox.height / 2);\r\n        }\r\n\r\n        if (this.options.rotationPoint) {\r\n            this.rectSelection.set.get(9).center(bbox.width / 2, 20);\r\n        }\r\n    };\r\n\r\n    SelectHandler.prototype.selectRect = function (value) {\r\n\r\n        var _this = this, bbox = this.el.bbox();\r\n\r\n        this.rectSelection.isSelected = value;\r\n\r\n        // when set is already p\r\n        this.rectSelection.set = this.rectSelection.set || this.parent.set();\r\n\r\n        // helperFunction to create a mouse-down function which triggers the event specified in `eventName`\r\n        function getMoseDownFunc(eventName) {\r\n            return function (ev) {\r\n                ev = ev || window.event;\r\n                ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\r\n                _this.el.fire(eventName, {x: ev.pageX, y: ev.pageY, event: ev});\r\n            };\r\n        }\r\n\r\n        // create the selection-rectangle and add the css-class\r\n        if (!this.rectSelection.set.get(0)) {\r\n            this.rectSelection.set.add(this.nested.rect(bbox.width, bbox.height).addClass(this.options.classRect));\r\n        }\r\n\r\n        // Draw Points at the edges, if enabled\r\n        if (this.options.points && !this.rectSelection.set.get(1)) {\r\n            this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, 0).attr('class', this.options.classPoints + '_lt').mousedown(getMoseDownFunc('lt')));\r\n            this.rectSelection.set.add(this.nested.circle(this.options.radius).center(bbox.width, 0).attr('class', this.options.classPoints + '_rt').mousedown(getMoseDownFunc('rt')));\r\n            this.rectSelection.set.add(this.nested.circle(this.options.radius).center(bbox.width, bbox.height).attr('class', this.options.classPoints + '_rb').mousedown(getMoseDownFunc('rb')));\r\n            this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, bbox.height).attr('class', this.options.classPoints + '_lb').mousedown(getMoseDownFunc('lb')));\r\n\r\n            this.rectSelection.set.add(this.nested.circle(this.options.radius).center(bbox.width / 2, 0).attr('class', this.options.classPoints + '_t').mousedown(getMoseDownFunc('t')));\r\n            this.rectSelection.set.add(this.nested.circle(this.options.radius).center(bbox.width, bbox.height / 2).attr('class', this.options.classPoints + '_r').mousedown(getMoseDownFunc('r')));\r\n            this.rectSelection.set.add(this.nested.circle(this.options.radius).center(bbox.width / 2, bbox.height).attr('class', this.options.classPoints + '_b').mousedown(getMoseDownFunc('b')));\r\n            this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, bbox.height / 2).attr('class', this.options.classPoints + '_l').mousedown(getMoseDownFunc('l')));\r\n\r\n            this.rectSelection.set.each(function () {\r\n                this.addClass(_this.options.classPoints);\r\n            });\r\n        }\r\n\r\n        // draw rotationPint, if enabled\r\n        if (this.options.rotationPoint && !this.rectSelection.set.get(9)) {\r\n\r\n            this.rectSelection.set.add(this.nested.circle(this.options.radius).center(bbox.width / 2, 20).attr('class', this.options.classPoints + '_rot')\r\n                .mousedown(function (ev) {\r\n                    ev = ev || window.event;\r\n                    ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\r\n                    _this.el.fire('rot', {x: ev.pageX, y: ev.pageY, event: ev});\r\n                }));\r\n\r\n        }\r\n\r\n    };\r\n\r\n    SelectHandler.prototype.handler = function () {\r\n\r\n        var bbox = this.el.bbox();\r\n        this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x, bbox.y));\r\n\r\n        if (this.rectSelection.isSelected) {\r\n            this.updateRectSelection();\r\n        }\r\n\r\n        if (this.pointSelection.isSelected) {\r\n            this.updatePointSelection();\r\n        }\r\n\r\n    };\r\n\r\n    SelectHandler.prototype.observe = function () {\r\n        var _this = this;\r\n\r\n        if (MutationObserver) {\r\n            if (this.rectSelection.isSelected || this.pointSelection.isSelected) {\r\n                this.observerInst = this.observerInst || new MutationObserver(function () {\r\n                    _this.handler();\r\n                });\r\n                this.observerInst.observe(this.el.node, {attributes: true});\r\n            } else {\r\n                try {\r\n                    this.observerInst.disconnect();\r\n                    delete this.observerInst;\r\n                } catch (e) {\r\n                }\r\n            }\r\n        } else {\r\n            this.el.off('DOMAttrModified.select');\r\n\r\n            if (this.rectSelection.isSelected || this.pointSelection.isSelected) {\r\n                this.el.on('DOMAttrModified.select', function () {\r\n                    _this.handler();\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    SelectHandler.prototype.cleanup = function () {\r\n\r\n        //var _this = this;\r\n\r\n        if (!this.rectSelection.isSelected && this.rectSelection.set) {\r\n            // stop watching the element, remove the selection\r\n            this.rectSelection.set.each(function () {\r\n                this.remove();\r\n            });\r\n\r\n            this.rectSelection.set.clear();\r\n            delete this.rectSelection.set;\r\n        }\r\n\r\n        if (!this.pointSelection.isSelected && this.pointSelection.set) {\r\n            // Remove all points, clear the set, stop watching the element\r\n            this.pointSelection.set.each(function () {\r\n                this.remove();\r\n            });\r\n\r\n            this.pointSelection.set.clear();\r\n            delete this.pointSelection.set;\r\n        }\r\n\r\n        if (!this.pointSelection.isSelected && !this.rectSelection.isSelected) {\r\n            this.nested.remove();\r\n            delete this.nested;\r\n\r\n            /*try{\r\n             this.observerInst.disconnect();\r\n             delete this.observerInst;\r\n             }catch(e){}\r\n\r\n             this.el.off('DOMAttrModified.select');\r\n\r\n             }else{\r\n\r\n             if(MutationObserver){\r\n             this.observerInst = this.observerInst || new MutationObserver(function(){ _this.handler(); });\r\n             this.observerInst.observe(this.el.node, {attributes: true});\r\n             }else{\r\n             this.el.on('DOMAttrModified.select', function(){ _this.handler(); } )\r\n             }\r\n             */\r\n        }\r\n    };\r\n\r\n\r\n    SVG.extend(SVG.Element, {\r\n        // Select element with mouse\r\n        selectize: function (value, options) {\r\n\r\n            // Check the parameters and reassign if needed\r\n            if (typeof value === 'object') {\r\n                options = value;\r\n                value = true;\r\n            }\r\n\r\n            var selectHandler = this.remember('_selectHandler') || new SelectHandler(this);\r\n\r\n            selectHandler.init(value === undefined ? true : value, options || {});\r\n\r\n            return this;\r\n\r\n        }\r\n    });\r\n\r\n    SVG.Element.prototype.selectize.defaults = {\r\n        points: true,                            // If true, points at the edges are drawn. Needed for resize!\r\n        classRect: 'svg_select_boundingRect',    // Css-class added to the rect\r\n        classPoints: 'svg_select_points',        // Css-class added to the points\r\n        radius: 7,                               // radius of the points\r\n        rotationPoint: true,                     // If true, rotation point is drawn. Needed for rotation!\r\n        deepSelect: false                        // If true, moving of single points is possible (only line, polyline, polyon)\r\n    };\r\n\r\n})();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/svg.select.js/dist/svg.select.js\n// module id = 4\n// module chunks = 0","/*! svg.resize.js - v1.4.0 - 2016-09-15\r\n* https://github.com/Fuzzyma/svg.resize.js\r\n* Copyright (c) 2016 Ulrich-Matthias Schäfer; Licensed MIT */\r\n;(function () {\r\n\r\n    function ResizeHandler(el) {\r\n\r\n        el.remember('_resizeHandler', this);\r\n\r\n        this.el = el;\r\n        this.parameters = {};\r\n        this.lastUpdateCall = null;\r\n        this.p = el.doc().node.createSVGPoint();\r\n    }\r\n\r\n    ResizeHandler.prototype.transformPoint = function(x, y, m){\r\n\r\n        this.p.x = x - (this.offset.x - window.pageXOffset);\r\n        this.p.y = y - (this.offset.y - window.pageYOffset);\r\n\r\n        return this.p.matrixTransform(m || this.m);\r\n\r\n    };\r\n\r\n    ResizeHandler.prototype._extractPosition = function(event) {\r\n        // Extract a position from a mouse/touch event.\r\n        // Returns { x: .., y: .. }\r\n        return {\r\n            x: event.clientX || event.touches[0].pageX,\r\n            y: event.clientY || event.touches[0].pageY\r\n        };\r\n    };\r\n\r\n    ResizeHandler.prototype.init = function (options) {\r\n\r\n        var _this = this;\r\n\r\n        this.stop();\r\n\r\n        if (options === 'stop') {\r\n            return;\r\n        }\r\n\r\n        this.options = {};\r\n\r\n        // Merge options and defaults\r\n        for (var i in this.el.resize.defaults) {\r\n            this.options[i] = this.el.resize.defaults[i];\r\n            if (typeof options[i] !== 'undefined') {\r\n                this.options[i] = options[i];\r\n            }\r\n        }\r\n\r\n        // We listen to all these events which are specifying different edges\r\n        this.el.on('lt.resize', function(e){ _this.resize(e || window.event); });  // Left-Top\r\n        this.el.on('rt.resize', function(e){ _this.resize(e || window.event); });  // Right-Top\r\n        this.el.on('rb.resize', function(e){ _this.resize(e || window.event); });  // Right-Bottom\r\n        this.el.on('lb.resize', function(e){ _this.resize(e || window.event); });  // Left-Bottom\r\n\r\n        this.el.on('t.resize', function(e){ _this.resize(e || window.event); });   // Top\r\n        this.el.on('r.resize', function(e){ _this.resize(e || window.event); });   // Right\r\n        this.el.on('b.resize', function(e){ _this.resize(e || window.event); });   // Bottom\r\n        this.el.on('l.resize', function(e){ _this.resize(e || window.event); });   // Left\r\n\r\n        this.el.on('rot.resize', function(e){ _this.resize(e || window.event); }); // Rotation\r\n\r\n        this.el.on('point.resize', function(e){ _this.resize(e || window.event); }); // Point-Moving\r\n\r\n        // This call ensures, that the plugin reacts to a change of snapToGrid immediately\r\n        this.update();\r\n\r\n    };\r\n\r\n    ResizeHandler.prototype.stop = function(){\r\n        this.el.off('lt.resize');\r\n        this.el.off('rt.resize');\r\n        this.el.off('rb.resize');\r\n        this.el.off('lb.resize');\r\n\r\n        this.el.off('t.resize');\r\n        this.el.off('r.resize');\r\n        this.el.off('b.resize');\r\n        this.el.off('l.resize');\r\n\r\n        this.el.off('rot.resize');\r\n\r\n        this.el.off('point.resize');\r\n\r\n        return this;\r\n    };\r\n\r\n    ResizeHandler.prototype.resize = function (event) {\r\n\r\n        var _this = this;\r\n\r\n        this.m = this.el.node.getScreenCTM().inverse();\r\n        this.offset = { x: window.pageXOffset, y: window.pageYOffset };\r\n\r\n        var txPt = this._extractPosition(event.detail.event);\r\n        this.parameters = {\r\n            type: this.el.type, // the type of element\r\n            p: this.transformPoint(txPt.x, txPt.y),\r\n            x: event.detail.x,      // x-position of the mouse when resizing started\r\n            y: event.detail.y,      // y-position of the mouse when resizing started\r\n            box: this.el.bbox(),    // The bounding-box of the element\r\n            rotation: this.el.transform().rotation  // The current rotation of the element\r\n        };\r\n\r\n        // Add font-size parameter if the element type is text\r\n        if (this.el.type === \"text\") {\r\n            this.parameters.fontSize = this.el.attr()[\"font-size\"];\r\n        }\r\n\r\n        // the i-param in the event holds the index of the point which is moved, when using `deepSelect`\r\n        if (event.detail.i !== undefined) {\r\n\r\n            // get the point array\r\n            var array = this.el.array().valueOf();\r\n\r\n            // Save the index and the point which is moved\r\n            this.parameters.i = event.detail.i;\r\n            this.parameters.pointCoords = [array[event.detail.i][0], array[event.detail.i][1]];\r\n        }\r\n\r\n        // Lets check which edge of the bounding-box was clicked and resize the this.el according to this\r\n        switch (event.type) {\r\n\r\n            // Left-Top-Edge\r\n            case 'lt':\r\n                // We build a calculating function for every case which gives us the new position of the this.el\r\n                this.calc = function (diffX, diffY) {\r\n                    // The procedure is always the same\r\n                    // First we snap the edge to the given grid (snapping to 1px grid is normal resizing)\r\n                    var snap = this.snapToGrid(diffX, diffY);\r\n\r\n                    // Now we check if the new height and width still valid (> 0)\r\n                    if (this.parameters.box.width - snap[0] > 0 && this.parameters.box.height - snap[1] > 0) {\r\n                        // ...if valid, we resize the this.el (which can include moving because the coord-system starts at the left-top and this edge is moving sometimes when resized)\r\n\r\n                        /*\r\n                         * but first check if the element is text box, so we can change the font size instead of\r\n                         * the width and height\r\n                         */\r\n\r\n                        if (this.parameters.type === \"text\") {\r\n                            this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y);\r\n                            this.el.attr(\"font-size\", this.parameters.fontSize - snap[0]);\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y + snap[1]).size(this.parameters.box.width - snap[0], this.parameters.box.height - snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Right-Top\r\n            case 'rt':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 1 << 1);\r\n                    if (this.parameters.box.width + snap[0] > 0 && this.parameters.box.height - snap[1] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            this.el.move(this.parameters.box.x - snap[0], this.parameters.box.y);\r\n                            this.el.attr(\"font-size\", this.parameters.fontSize + snap[0]);\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y + snap[1]).size(this.parameters.box.width + snap[0], this.parameters.box.height - snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Right-Bottom\r\n            case 'rb':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 0);\r\n                    if (this.parameters.box.width + snap[0] > 0 && this.parameters.box.height + snap[1] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            this.el.move(this.parameters.box.x - snap[0], this.parameters.box.y);\r\n                            this.el.attr(\"font-size\", this.parameters.fontSize + snap[0]);\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + snap[0], this.parameters.box.height + snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Left-Bottom\r\n            case 'lb':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 1);\r\n                    if (this.parameters.box.width - snap[0] > 0 && this.parameters.box.height + snap[1] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y);\r\n                            this.el.attr(\"font-size\", this.parameters.fontSize - snap[0]);\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y).size(this.parameters.box.width - snap[0], this.parameters.box.height + snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Top\r\n            case 't':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 1 << 1);\r\n                    if (this.parameters.box.height - snap[1] > 0) {\r\n                        // Disable the font-resizing if it is not from the corner of bounding-box\r\n                        if (this.parameters.type === \"text\") {\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y + snap[1]).height(this.parameters.box.height - snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Right\r\n            case 'r':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 0);\r\n                    if (this.parameters.box.width + snap[0] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + snap[0]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Bottom\r\n            case 'b':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 0);\r\n                    if (this.parameters.box.height + snap[1] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Left\r\n            case 'l':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 1);\r\n                    if (this.parameters.box.width - snap[0] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y).width(this.parameters.box.width - snap[0]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Rotation\r\n            case 'rot':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n\r\n                    // yes this is kinda stupid but we need the mouse coords back...\r\n                    var current = {x: diffX + this.parameters.p.x, y: diffY + this.parameters.p.y};\r\n\r\n                    // start minus middle\r\n                    var sAngle = Math.atan2((this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2), (this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2));\r\n\r\n                    // end minus middle\r\n                    var pAngle = Math.atan2((current.y - this.parameters.box.y - this.parameters.box.height / 2), (current.x - this.parameters.box.x - this.parameters.box.width / 2));\r\n\r\n                    var angle = (pAngle - sAngle) * 180 / Math.PI;\r\n\r\n                    // We have to move the element to the center of the box first and change the rotation afterwards\r\n                    // because rotation always works around a rotation-center, which is changed when moving the element\r\n                    // We also set the new rotation center to the center of the box.\r\n                    this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(this.parameters.rotation + angle - angle % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);\r\n                };\r\n                break;\r\n\r\n            // Moving one single Point (needed when an element is deepSelected which means you can move every single point of the object)\r\n            case 'point':\r\n                this.calc = function (diffX, diffY) {\r\n\r\n                    // Snapping the point to the grid\r\n                    var snap = this.snapToGrid(diffX, diffY, this.parameters.pointCoords[0], this.parameters.pointCoords[1]);\r\n\r\n                    // Get the point array\r\n                    var array = this.el.array().valueOf();\r\n\r\n                    // Changing the moved point in the array\r\n                    array[this.parameters.i][0] = this.parameters.pointCoords[0] + snap[0];\r\n                    array[this.parameters.i][1] = this.parameters.pointCoords[1] + snap[1];\r\n\r\n                    // And plot the new this.el\r\n                    this.el.plot(array);\r\n                };\r\n        }\r\n\r\n        this.el.fire('resizestart', {dx: this.parameters.x, dy: this.parameters.y, event: event});\r\n        // When resizing started, we have to register events for...\r\n        // Touches.\r\n        SVG.on(window, 'touchmove.resize', function(e) {\r\n            _this.update(e || window.event);\r\n        });\r\n        SVG.on(window, 'touchend.resize', function() {\r\n            _this.done();\r\n        });\r\n        // Mouse.\r\n        SVG.on(window, 'mousemove.resize', function (e) {\r\n            _this.update(e || window.event);\r\n        });\r\n        SVG.on(window, 'mouseup.resize', function () {\r\n            _this.done();\r\n        });\r\n\r\n    };\r\n\r\n    // The update-function redraws the element every time the mouse is moving\r\n    ResizeHandler.prototype.update = function (event) {\r\n\r\n        if (!event) {\r\n            if (this.lastUpdateCall) {\r\n                this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Calculate the difference between the mouseposition at start and now\r\n        var txPt = this._extractPosition(event);\r\n        var p = this.transformPoint(txPt.x, txPt.y);\r\n\r\n        var diffX = p.x - this.parameters.p.x,\r\n            diffY = p.y - this.parameters.p.y;\r\n\r\n        this.lastUpdateCall = [diffX, diffY];\r\n\r\n        // Calculate the new position and height / width of the element\r\n        this.calc(diffX, diffY);\r\n\r\n       // Emit an event to say we have changed.\r\n        this.el.fire('resizing', {dx: diffX, dy: diffY, event: event});\r\n    };\r\n\r\n    // Is called on mouseup.\r\n    // Removes the update-function from the mousemove event\r\n    ResizeHandler.prototype.done = function () {\r\n        this.lastUpdateCall = null;\r\n        SVG.off(window, 'mousemove.resize');\r\n        SVG.off(window, 'mouseup.resize');\r\n        SVG.off(window, 'touchmove.resize');\r\n        SVG.off(window, 'touchend.resize');\r\n        this.el.fire('resizedone');\r\n    };\r\n\r\n    // The flag is used to determine whether the resizing is used with a left-Point (first bit) and top-point (second bit)\r\n    // In this cases the temp-values are calculated differently\r\n    ResizeHandler.prototype.snapToGrid = function (diffX, diffY, flag, pointCoordsY) {\r\n\r\n        var temp;\r\n\r\n        // If `pointCoordsY` is given, a single Point has to be snapped (deepSelect). That's why we need a different temp-value\r\n        if (typeof pointCoordsY !== 'undefined') {\r\n            // Note that flag = pointCoordsX in this case\r\n            temp = [(flag + diffX) % this.options.snapToGrid, (pointCoordsY + diffY) % this.options.snapToGrid];\r\n        } else {\r\n            // We check if the flag is set and if not we set a default-value (both bits set - which means upper-left-edge)\r\n            flag = flag == null ? 1 | 1 << 1 : flag;\r\n            temp = [(this.parameters.box.x + diffX + (flag & 1 ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + diffY + (flag & (1 << 1) ? 0 : this.parameters.box.height)) % this.options.snapToGrid];\r\n        }\r\n\r\n\r\n        diffX -= (Math.abs(temp[0]) < this.options.snapToGrid / 2 ?\r\n                  temp[0] :\r\n                  temp[0] - (diffX < 0 ? -this.options.snapToGrid : this.options.snapToGrid));\r\n        diffY -= (Math.abs(temp[1]) < this.options.snapToGrid / 2 ?\r\n                  temp[1] :\r\n                  temp[1] - (diffY < 0 ? -this.options.snapToGrid : this.options.snapToGrid));\r\n\r\n        return this.constraintToBox(diffX, diffY, flag, pointCoordsY);\r\n\r\n    };\r\n\r\n    // keep element within constrained box\r\n    ResizeHandler.prototype.constraintToBox = function (diffX, diffY, flag, pointCoordsY) {\r\n        //return [diffX, diffY]\r\n        var c = this.options.constraint || {};\r\n        var orgX, orgY;\r\n\r\n        if (typeof pointCoordsY !== 'undefined') {\r\n          orgX = flag;\r\n          orgY = pointCoordsY;\r\n        } else {\r\n          orgX = this.parameters.box.x + (flag & 1 ? 0 : this.parameters.box.width);\r\n          orgY = this.parameters.box.y + (flag & (1<<1) ? 0 : this.parameters.box.height);\r\n        }\r\n\r\n        if (typeof c.minX !== 'undefined' && orgX + diffX < c.minX) {\r\n          diffX = c.minX - orgX;\r\n        }\r\n\r\n        if (typeof c.maxX !== 'undefined' && orgX + diffX > c.maxX) {\r\n          diffX = c.maxX - orgX;\r\n        }\r\n\r\n        if (typeof c.minY !== 'undefined' && orgY + diffY < c.minY) {\r\n          diffY = c.minY - orgY;\r\n        }\r\n\r\n        if (typeof c.maxY !== 'undefined' && orgY + diffY > c.maxY) {\r\n          diffY = c.maxY - orgY;\r\n        }\r\n\r\n        return [diffX, diffY];\r\n    };\r\n\r\n    SVG.extend(SVG.Element, {\r\n        // Resize element with mouse\r\n        resize: function (options) {\r\n\r\n            (this.remember('_resizeHandler') || new ResizeHandler(this)).init(options || {});\r\n\r\n            return this;\r\n\r\n        }\r\n\r\n    });\r\n\r\n    SVG.Element.prototype.resize.defaults = {\r\n        snapToAngle: 0.1,    // Specifies the speed the rotation is happening when moving the mouse\r\n        snapToGrid: 1,       // Snaps to a grid of `snapToGrid` Pixels\r\n        constraint: {}       // keep element within constrained box\r\n    };\r\n\r\n}).call(this);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/svg.resize.js/dist/svg.resize.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}